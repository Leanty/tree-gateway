'use strict';

import { Singleton, AutoWired, Inject } from 'typescript-ioc';
import { Database } from '../database';
import { ConfigPackageService } from '../service/config-package';
import chalk from 'chalk';
import { Logger } from '../logger';
const compareVersions = require('compare-versions');

@Singleton
@AutoWired
export class VersionUpgrades {
    @Inject private database: Database;
    @Inject private service: ConfigPackageService;
    @Inject private logger: Logger;

    checkGatewayVersion(): Promise<void> {
        return new Promise<void>((resolve, reject) => {
            const packageJson = require('../../package.json');
            this.database.getGatewayVersion()
                .then(version => {
                    const compared = compareVersions(packageJson.version, version || '0.0.1');
                    if ( compared === 0) {
                        return resolve();
                    } else if (compared < 0) {
                        return reject(new Error('Can not load configuration. This configuration repository contains information generated by a newer tree-gateway version. Try to update tree-gateway, running npm i -g tree-gateway.'));
                    }
                    this.updateGatewayConfiguration()
                        .then(resolve)
                        .catch(reject);
                })
                .catch(reject);
        });
    }

    private updateGatewayConfiguration() {
        return new Promise<void>((resolve, reject) => {
            this.database.startGatewayUpdate()
            .then((previous: string) => {
                if (previous !== Database.UPDATING) {
                    return this.update(previous);
                } else {
                    return this.wait(0);
                }
            })
            .then(resolve)
            .catch(reject);
        });
    }

    private update(version: string) {
        return new Promise<void>((resolve, reject) => {
            if (compareVersions(version || '0.0.1', '2.0.0') < 0) {
                this.logger.info(chalk.magenta('An older configuration was found. Updating it to the newer format. Check tree-gateway migration guide for more info.'));
                this.service.get()
                    .then(pac => this.service.set(pac))
                    .then(() => this.database.registerGatewayVersion())
                    .then(resolve)
                    .catch(reject);
            } else {
                resolve();
            }
        });
    }

    private wait(count: number) {
        return new Promise<void>((resolve, reject) => {
            if (count > 10) {
                return reject(new Error('Can not upgrade gateway configuration.'));
            }
            setTimeout(() => {
                this.database.getGatewayVersion()
                    .then(version => {
                        if (version === Database.UPDATING) {
                            this.wait(count++)
                                .then(resolve)
                                .catch(reject);
                        } else {
                            resolve();
                        }
                    });
            }, 100);
        });
    }
}
