{"version":3,"sources":["../../src/spec/test-auth.ts"],"names":[],"mappings":";AAAA,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,QAAO,SAAS,CAAC,CAAA;AACjB,wBAAsB,gBAAgB,CAAC,CAAA;AACvC,yBAAuB,iBAAiB,CAAC,CAAA;AACzC,+BAA8E,gBAAgB,CAAC,CAAA;AAE/F,IAAM,QAAQ,GAAa;IACzB,GAAG,EAAE;QACD,IAAM,QAAQ,GAAa,IAAI,mBAAQ,EAAE,CAAC;QAC1C,QAAQ,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QACzB,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;CACF,CAAC;AAEF,0BAAS,CAAC,IAAI,CAAC,mBAAQ,CAAC,CAAC,KAAK,CAAC,sBAAK,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAElE,IAAM,OAAO,GAAY,IAAI,iBAAO,EAAE,CAAC;AACvC,IAAM,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;AAC3B,IAAM,IAAI,GAAG,IAAI,CAAC;AAClB,IAAM,cAAc,GAAG,mBAAmB,GAAC,IAAI,CAAC;AAChD,IAAI,MAAM,CAAC;AACX,GAAG,CAAC,GAAG,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;AAEvB,QAAQ,CAAC,eAAe,EAAE;IACzB,SAAS,CAAC,UAAS,IAAI;QACtB,OAAO,CAAC,GAAG,CAAC,2BAA2B,CAAC,CAAC;QACzC,OAAO,CAAC,SAAS,CAAC,SAAS,GAAG,OAAO,EAAE;YACtC,OAAO,CAAC,GAAG,CAAC,oBAAoB,CAAC,CAAC;YAClC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE;gBACzB,OAAO,CAAC,GAAG,CAAC,iBAAiB,CAAC,CAAC;gBAC/B,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC;QACR,MAAM,CAAC,KAAK,EAAE,CAAC;IAChB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,mBAAmB,EAAE;QAC7B,EAAE,CAAC,gCAAgC,EAAE,UAAC,IAAI;YACzC,OAAO,CAAC,cAAc,GAAC,iBAAiB,EAAE,UAAC,KAAK,EAAE,QAAQ,EAAE,IAAI;gBAC/D,IAAI,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;gBAC9B,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC;gBACrC,IAAI,EAAE,CAAC;YACR,CAAC,CAAC,CAAC;QACJ,CAAC,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;AACJ,CAAC,CAAC,CAAC","file":"test-auth.spec.js","sourcesContent":["import * as express from \"express\";\nimport * as request from \"request\";\nimport \"jasmine\";\nimport {Gateway} from \"../lib/gateway\";\nimport {Settings} from \"../lib/settings\";\nimport {Container, Scope, Scoped, Provided, Provider, AutoWired, Inject} from \"typescript-ioc\";\n\nconst provider: Provider = { \n  get: () => {\n      const settings: Settings = new Settings();\n      settings.app = express(); \n      return settings; \n  }\n};\n\nContainer.bind(Settings).scope(Scope.Singleton).provider(provider)\n\nconst gateway: Gateway = new Gateway();\nconst app = gateway.server;\nconst port = 4567;\nconst gatewayAddress = \"http://localhost:\"+port;\nlet server;\napp.set('env', 'test');\n\ndescribe(\"Gateway Tests\", () => {\n\tbeforeAll(function(done){\n\t\tconsole.log('\\nInitializing gateway...');\n\t\tgateway.configure(__dirname + '/apis', ()=>{\n\t\t\tconsole.log('Gateway configured');\n\t\t\tserver = app.listen(port, ()=>{\n\t\t\t\tconsole.log('Gateway started');\n\t\t\t\tdone();\n\t\t\t});\n\t\t});\n\t});\n\n\tafterAll(function(){\n\t\tserver.close();\n\t});\n\n\tdescribe(\"The Gateway Proxy\", () => {\n\t\tit(\"should be able to proxy an API\", (done) => {\n\t\t\trequest(gatewayAddress+\"/test/get?arg=1\", (error, response, body)=>{\n\t\t\t\tlet result = JSON.parse(body);\n\t\t\t\texpect(result.args.arg).toEqual(\"1\");\n\t\t\t\tdone();\t\t\t\t\n\t\t\t});\n\t\t});\n\t});\n});\n"]}