{"version":3,"sources":["../../src/lib/logger.ts","logger.js"],"names":["Winston","require","gateway_1","StringUtils","path","defaults","Logger","config","gateway","winston","instantiateLogger","prototype","level","LogLevel","info","options","transports","console","push","Console","file","filename","join","__dirname","startsWith","rootPath","File","isDebugEnabled","debug","isInfoEnabled","isErrorEnabled","error","msg","meta","_i","arguments","length","exports"],"mappings":"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","file":"logger.js","sourcesContent":["\"use strict\";\n\nimport * as Winston from \"winston\";\nimport {LoggerConfig, LogLevel} from \"./config/gateway\";\nimport * as StringUtils from \"underscore.string\";\nimport * as path from \"path\";\nimport {Gateway} from \"./gateway\";\n\nlet defaults = require('defaults');\n\nexport class Logger {\n    level: LogLevel;\n    winston: Winston.LoggerInstance;\n    config: LoggerConfig;\n\n    constructor(config: LoggerConfig, gateway: Gateway) {\n        this.config = config;\n        this.winston = this.instantiateLogger(config, gateway);\n    }\n\n    private instantiateLogger(config: LoggerConfig, gateway: Gateway) {\n        this.level = (config? LogLevel[config.level] : LogLevel.info);\n        const options: Winston.LoggerOptions = {\n           level: LogLevel[this.level],\n           transports: [] \n        }\n        \n        if (config && config.console) {\n            options.transports.push(new Winston.transports.Console(config.console));\n        }\n        if (config && config.file) {\n            config.file = defaults(config.file, {\n                filename: path.join(__dirname, 'logs/gateway.log')\n            })\n            if (StringUtils.startsWith(config.file.filename, '.')) {\n            config.file.filename = path.join(gateway.config.rootPath, config.file.filename);                \n            }\n            options.transports.push(new Winston.transports.File(config.file));\n        }\n        \n        return new Winston.Logger(options);\n    }\n\n    isDebugEnabled (): boolean {\n        return this.level === LogLevel.debug;\n    }\n\n    isInfoEnabled (): boolean {\n        return this.level >= LogLevel.info;\n    }\n\n    isErrorEnabled (): boolean {\n        return this.level >= LogLevel.error;\n    }\n\n    debug(msg: string, ...meta:any[]) {\n        this.winston.debug(msg, meta);\n    }\n\n    info(msg: string, ...meta:any[]) {\n        this.winston.info(msg, meta);\n    }\n\n    error(msg: string, ...meta:any[]) {\n        this.winston.error(msg, meta);\n    }\n}\n","\"use strict\";\nvar Winston = require(\"winston\");\nvar gateway_1 = require(\"./config/gateway\");\nvar StringUtils = require(\"underscore.string\");\nvar path = require(\"path\");\nvar defaults = require('defaults');\nvar Logger = (function () {\n    function Logger(config, gateway) {\n        this.config = config;\n        this.winston = this.instantiateLogger(config, gateway);\n    }\n    Logger.prototype.instantiateLogger = function (config, gateway) {\n        this.level = (config ? gateway_1.LogLevel[config.level] : gateway_1.LogLevel.info);\n        var options = {\n            level: gateway_1.LogLevel[this.level],\n            transports: []\n        };\n        if (config && config.console) {\n            options.transports.push(new Winston.transports.Console(config.console));\n        }\n        if (config && config.file) {\n            config.file = defaults(config.file, {\n                filename: path.join(__dirname, 'logs/gateway.log')\n            });\n            if (StringUtils.startsWith(config.file.filename, '.')) {\n                config.file.filename = path.join(gateway.config.rootPath, config.file.filename);\n            }\n            options.transports.push(new Winston.transports.File(config.file));\n        }\n        return new Winston.Logger(options);\n    };\n    Logger.prototype.isDebugEnabled = function () {\n        return this.level === gateway_1.LogLevel.debug;\n    };\n    Logger.prototype.isInfoEnabled = function () {\n        return this.level >= gateway_1.LogLevel.info;\n    };\n    Logger.prototype.isErrorEnabled = function () {\n        return this.level >= gateway_1.LogLevel.error;\n    };\n    Logger.prototype.debug = function (msg) {\n        var meta = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            meta[_i - 1] = arguments[_i];\n        }\n        this.winston.debug(msg, meta);\n    };\n    Logger.prototype.info = function (msg) {\n        var meta = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            meta[_i - 1] = arguments[_i];\n        }\n        this.winston.info(msg, meta);\n    };\n    Logger.prototype.error = function (msg) {\n        var meta = [];\n        for (var _i = 1; _i < arguments.length; _i++) {\n            meta[_i - 1] = arguments[_i];\n        }\n        this.winston.error(msg, meta);\n    };\n    return Logger;\n}());\nexports.Logger = Logger;\n"]}