{"version":3,"sources":["../../src/lib/proxy/interceptor.ts"],"names":["path","require","Utils","pathToRegexp","ProxyInterceptor","proxy","prototype","requestInterceptor","hasRequestInterceptor","buildRequestInterceptor","responseInterceptor","hasResponseInterceptor","buildResponseInterceptor","_this","func","Array","push","interceptor","request","forEach","index","p","join","gateway","middlewarePath","name","appliesTo","normalizePath","f","eval","response","length","exports"],"mappings":"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","file":"interceptor.js","sourcesContent":["\"use strict\";\n\nimport * as StringUtils from \"underscore.string\";\nimport * as config from \"../config/proxy\";\nimport * as path from \"path\"; \nimport * as Utils from \"./utils\";\nimport {ApiProxy} from \"./proxy\";\n\nlet pathToRegexp = require('path-to-regexp');\n\nexport class ProxyInterceptor {\n    private proxy: ApiProxy;\n\n    constructor(proxy: ApiProxy) {\n        this.proxy = proxy;\n    }\n    \n    requestInterceptor(proxy: config.Proxy) {\n        if (this.hasRequestInterceptor(proxy)) {\n          return (this.buildRequestInterceptor(proxy));\n        }\n        return null;\n    }\n\n    responseInterceptor(proxy: config.Proxy) {\n        if (this.hasResponseInterceptor(proxy)) {\n          return (this.buildResponseInterceptor(proxy));\n        }\n        return null;\n    }\n\n    private buildRequestInterceptor(proxy: config.Proxy) {\n        let func = new Array<string>();\n        func.push(\"function(proxyReq, originalReq){\");\n        proxy.interceptor.request.forEach((interceptor, index)=>{\n            let p = path.join(this.proxy.gateway.middlewarePath, 'interceptor', 'request' ,interceptor.name);                \n            if (interceptor.appliesTo) {\n                func.push(\"if (\");                \n                interceptor.appliesTo.forEach((path,index)=>{\n                    if (index > 0) {\n                        func.push(\"||\");                \n                    }                \n                    func.push(\"(pathToRegexp('\"+Utils.normalizePath(path)+\"').test(originalReq.path))\");\n\n                });\n                func.push(\")\");                \n            }\n            func.push(\"proxyReq = require('\"+p+\"')(proxyReq, originalReq);\");\n        });\n        func.push(\"return proxyReq;\");\n        func.push(\"}\");\n        let f;\n        eval('f = '+func.join(''))\n        return f;\n    }\n\n    private buildResponseInterceptor(proxy: config.Proxy) {\n        let func = new Array<string>();\n        func.push(\"function(rsp, data, req, res, callback){\");\n        func.push(\"var continueChain = function(rsp, data, req, res, calback){ callback(null, data);};\");\n        proxy.interceptor.response.forEach((interceptor, index)=>{\n            if (interceptor.appliesTo) {\n                func.push(\"var f\"+index+\";\");        \n                func.push(\"if (\");                \n                interceptor.appliesTo.forEach((path,index)=>{\n                    if (index > 0) {\n                        func.push(\"&&\");                \n                    }                \n                    func.push(\"!(pathToRegexp('\"+Utils.normalizePath(path)+\"').test(req.path))\");\n\n                });\n                func.push(\")\");                \n                func.push(\"f\"+index+\" = continueChain;\");        \n                func.push(\"else f\"+index+\" = \");        \n            }\n            else {\n                func.push(\"var f\"+index+\" = \");        \n            }\n            let p = path.join(this.proxy.gateway.middlewarePath, 'interceptor', 'response' ,interceptor.name);                \n            func.push(\"require('\"+p+\"');\");\n            func.push(\"f\"+index+\"(rsp, data, req, res, (error, value)=>{ \\\n                if (error) { \\\n                   callback(error); \\\n                   return; \\\n                } \\\n                data = value;\"\n            );\n        });\n        proxy.interceptor.response.forEach((interceptor, index)=>{\n            if (index == 0) {\n                func.push(\"callback(null, data);\");\n            }\n            func.push(\"});\");\n        });\n        func.push(\"}\");\n        let f;\n        eval('f = '+func.join(''));\n        return f;\n    }\n\n    private hasRequestInterceptor(proxy: config.Proxy) {\n        return (proxy.interceptor && proxy.interceptor.request && proxy.interceptor.request.length > 0);\n    }\n\n    private hasResponseInterceptor(proxy: config.Proxy) {\n        return (proxy.interceptor && proxy.interceptor.response && proxy.interceptor.response.length > 0);\n    }\n}  "]}