{"version":3,"sources":["../../src/lib/proxy/filter.ts"],"names":["Utils","require","path","pathToRegexp","ProxyFilter","proxy","prototype","buildFilters","filterChain","Array","target","allow","push","buildAllowFilter","deny","buildDenyFilter","hasCustomFilter","buildCustomFilter","_this","func","filter","forEach","index","appliesTo","normalizePath","p","join","gateway","middlewarePath","name","f","eval","length","method","toUpperCase","exports"],"mappings":";;;;;;;;;AAIA,IAAYA,KAAA,GAAKC,OAAA,CAAM,SAAN,CAAjB,C;;AACA,IAAYC,IAAA,GAAID,OAAA,CAAM,MAAN,CAAhB,C;;AAGA,IAAIE,YAAA,GAAeF,OAAA,CAAQ,gBAAR,CAAnB,C;;AAEA,IAAAG,WAAA,GAAA,YAAA;AAAA,I,sCAAA;AAAA,IAGI,SAAAA,WAAA,CAAYC,KAAZ,EAA2B;AAAA,Q,sCAAA;AAAA,Q,sCAAA;AAAA,QACvB,KAAKA,KAAL,GAAaA,KAAb,CADuB;AAAA,KAH/B;AAAA,I,sCAAA;AAAA,IAOID,WAAA,CAAAE,SAAA,CAAAC,YAAA,GAAA,UAAaF,KAAb,EAAgC;AAAA,Q,sCAAA;AAAA,Q,sCAAA;AAAA,QAC5B,IAAIG,WAAA,GAAc,IAAIC,KAAJ,EAAlB,CAD4B;AAAA,Q,sCAAA;AAAA,QAE5B,IAAIJ,KAAA,CAAMK,MAAN,CAAaC,KAAjB,EAAwB;AAAA,Y,yCAAA;AAAA,Y,uCAAA;AAAA,YACpBH,WAAA,CAAYI,IAAZ,CAAiB,KAAKC,gBAAL,CAAsBR,KAAA,CAAMK,MAAN,CAAaC,KAAnC,CAAjB,EADoB;AAAA,SAAxB,M;;SAF4B;AAAA,Q,uCAAA;AAAA,QAK5B,IAAIN,KAAA,CAAMK,MAAN,CAAaI,IAAjB,EAAuB;AAAA,Y,yCAAA;AAAA,Y,uCAAA;AAAA,YACrBN,WAAA,CAAYI,IAAZ,CAAiB,KAAKG,eAAL,CAAqBV,KAAA,CAAMK,MAAN,CAAaI,IAAlC,CAAjB,EADqB;AAAA,SAAvB,M;;SAL4B;AAAA,Q,uCAAA;AAAA,QAQ5B,IAAI,KAAKE,eAAL,CAAqBX,KAArB,CAAJ,EAAiC;AAAA,Y,yCAAA;AAAA,Y,uCAAA;AAAA,YAC/BG,WAAA,CAAYI,IAAZ,CAAiB,KAAKK,iBAAL,CAAuBZ,KAAvB,CAAjB,EAD+B;AAAA,SAAjC,M;;SAR4B;AAAA,Q,uCAAA;AAAA,QAW5B,OAAOG,WAAP,CAX4B;AAAA,KAAhC,CAPJ;AAAA,I,uCAAA;AAAA,IAqBYJ,WAAA,CAAAE,SAAA,CAAAW,iBAAA,GAAR,UAA0BZ,KAA1B,EAA6C;AAAA,Q,sCAAA;AAAA,Q,uCAAA;AAAA,QAA7C,IAAAa,KAAA,GAAA,IAAA,CAA6C;AAAA,Q,uCAAA;AAAA,QACzC,IAAIC,IAAA,GAAO,IAAIV,KAAJ,EAAX,CADyC;AAAA,Q,uCAAA;AAAA,QAEzCU,IAAA,CAAKP,IAAL,CAAU,qBAAV,EAFyC;AAAA,Q,uCAAA;AAAA,QAGzCO,IAAA,CAAKP,IAAL,CAAU,sBAAV,EAHyC;AAAA,Q,uCAAA;AAAA,QAIzCO,IAAA,CAAKP,IAAL,CAAU,cAAV,EAJyC;AAAA,Q,uCAAA;AAAA,QAKzCP,KAAA,CAAMe,MAAN,CAAaC,OAAb,CAAqB,UAACD,MAAD,EAASE,KAAT,EAAc;AAAA,Y,sCAAA;AAAA,Y,uCAAA;AAAA,YAC/B,IAAIA,KAAA,GAAQ,CAAZ,EAAe;AAAA,gB,yCAAA;AAAA,gB,uCAAA;AAAA,gBACXH,IAAA,CAAKP,IAAL,CAAU,IAAV,EADW;AAAA,aAAf,M;;aAD+B;AAAA,Y,uCAAA;AAAA,YAI/BO,IAAA,CAAKP,IAAL,CAAU,GAAV,EAJ+B;AAAA,Y,uCAAA;AAAA,YAK/B,IAAIQ,MAAA,CAAOG,SAAX,EAAsB;AAAA,gB,yCAAA;AAAA,gB,uCAAA;AAAA,gBAClBJ,IAAA,CAAKP,IAAL,CAAU,IAAV,EADkB;AAAA,gB,uCAAA;AAAA,gBAElBQ,MAAA,CAAOG,SAAP,CAAiBF,OAAjB,CAAyB,UAACnB,IAAD,EAAMoB,KAAN,EAAW;AAAA,oB,sCAAA;AAAA,oB,uCAAA;AAAA,oBAChC,IAAIA,KAAA,GAAQ,CAAZ,EAAe;AAAA,wB,yCAAA;AAAA,wB,uCAAA;AAAA,wBACXH,IAAA,CAAKP,IAAL,CAAU,IAAV,EADW;AAAA,qBAAf,M;;qBADgC;AAAA,oB,uCAAA;AAAA,oBAIhCO,IAAA,CAAKP,IAAL,CAAU,qBAAkBZ,KAAA,CAAMwB,aAAN,CAAoBtB,IAApB,CAAlB,GAA4C,qBAAtD,EAJgC;AAAA,iBAApC,EAFkB;AAAA,gB,uCAAA;AAAA,gBASlBiB,IAAA,CAAKP,IAAL,CAAU,gBAAV,EATkB;AAAA,aAAtB,M;;aAL+B;AAAA,Y,uCAAA;AAAA,YAgB/B,IAAIa,CAAA,GAAIvB,IAAA,CAAKwB,IAAL,CAAUR,KAAA,CAAKb,KAAL,CAAWsB,OAAX,CAAmBC,cAA7B,EAA6C,QAA7C,EAAuDR,MAAA,CAAOS,IAA9D,CAAR,CAhB+B;AAAA,Y,uCAAA;AAAA,YAiB/BV,IAAA,CAAKP,IAAL,CAAU,eAAYa,CAAZ,GAAc,eAAxB,EAjB+B;AAAA,Y,uCAAA;AAAA,YAkB/BN,IAAA,CAAKP,IAAL,CAAU,GAAV,EAlB+B;AAAA,SAAnC,EALyC;AAAA,Q,uCAAA;AAAA,QAyBzCO,IAAA,CAAKP,IAAL,CAAU,IAAV,EAzByC;AAAA,Q,uCAAA;AAAA,QA0BzCO,IAAA,CAAKP,IAAL,CAAU,kBAAV,EA1ByC;AAAA,Q,uCAAA;AAAA,QA2BzCO,IAAA,CAAKP,IAAL,CAAU,GAAV,EA3ByC;AAAA,Q,uCAAA;AAAA,QA4BzC,IAAIkB,CAAJ,CA5ByC;AAAA,Q,uCAAA;AAAA,QA6BzCC,IAAA,CAAK,SAAOZ,IAAA,CAAKO,IAAL,CAAU,IAAV,CAAZ,EA7ByC;AAAA,Q,uCAAA;AAAA,QA8BzC,OAAOI,CAAP,CA9ByC;AAAA,KAArC,CArBZ;AAAA,I,uCAAA;AAAA,IAsDY1B,WAAA,CAAAE,SAAA,CAAAO,gBAAA,GAAR,UAAyBF,KAAzB,EAAmD;AAAA,Q,sCAAA;AAAA,Q,uCAAA;AAAA,QAC/C,IAAIQ,IAAA,GAAO,IAAIV,KAAJ,EAAX,CAD+C;AAAA,Q,uCAAA;AAAA,QAE/CU,IAAA,CAAKP,IAAL,CAAU,qBAAV,EAF+C;AAAA,Q,uCAAA;AAAA,QAG/CO,IAAA,CAAKP,IAAL,CAAU,sBAAV,EAH+C;AAAA,Q,uCAAA;AAAA,QAI/CO,IAAA,CAAKP,IAAL,CAAU,4BAAV,EAJ+C;AAAA,Q,uCAAA;AAAA,QAK/C,I,2CAAID,KAAA,CAAMT,I,CAAN,I,2CAAcS,KAAA,CAAMT,IAAN,CAAW8B,MAAX,GAAoB,C,CAAtC,EAAyC;AAAA,Y,yCAAA;AAAA,Y,uCAAA;AAAA,YACrCb,IAAA,CAAKP,IAAL,CAAU,cAAV,EADqC;AAAA,Y,uCAAA;AAAA,YAErCD,KAAA,CAAMsB,MAAN,CAAaZ,OAAb,CAAqB,UAACY,MAAD,EAASX,KAAT,EAAc;AAAA,gB,sCAAA;AAAA,gB,uCAAA;AAAA,gBAC/B,IAAIA,KAAA,GAAQ,CAAZ,EAAe;AAAA,oB,yCAAA;AAAA,oB,uCAAA;AAAA,oBACXH,IAAA,CAAKP,IAAL,CAAU,IAAV,EADW;AAAA,iBAAf,M;;iBAD+B;AAAA,gB,uCAAA;AAAA,gBAI/BO,IAAA,CAAKP,IAAL,CAAU,uBAAoBqB,MAAA,CAAOC,WAAP,EAApB,GAAyC,KAAnD,EAJ+B;AAAA,aAAnC,EAFqC;AAAA,Y,uCAAA;AAAA,YAQrCf,IAAA,CAAKP,IAAL,CAAU,IAAV,EARqC;AAAA,SAAzC,M;;SAL+C;AAAA,Q,uCAAA;AAAA,QAe/C,I,4CAAID,KAAA,CAAMsB,M,CAAN,I,4CAAgBtB,KAAA,CAAMsB,MAAN,CAAaD,MAAb,GAAsB,C,CAA1C,EAA6C;AAAA,Y,0CAAA;AAAA,Y,uCAAA;AAAA,YACzCb,IAAA,CAAKP,IAAL,CAAU,iBAAV,EADyC;AAAA,Y,uCAAA;AAAA,YAEzCO,IAAA,CAAKP,IAAL,CAAU,cAAV,EAFyC;AAAA,Y,uCAAA;AAAA,YAGzCD,KAAA,CAAMT,IAAN,CAAWmB,OAAX,CAAmB,UAACnB,IAAD,EAAOoB,KAAP,EAAY;AAAA,gB,sCAAA;AAAA,gB,uCAAA;AAAA,gBAC3B,IAAIA,KAAA,GAAQ,CAAZ,EAAe;AAAA,oB,0CAAA;AAAA,oB,uCAAA;AAAA,oBACXH,IAAA,CAAKP,IAAL,CAAU,IAAV,EADW;AAAA,iBAAf,M;;iBAD2B;AAAA,gB,uCAAA;AAAA,gBAI3BO,IAAA,CAAKP,IAAL,CAAU,qBAAkBZ,KAAA,CAAMwB,aAAN,CAAoBtB,IAApB,CAAlB,GAA4C,uBAAtD,EAJ2B;AAAA,aAA/B,EAHyC;AAAA,Y,uCAAA;AAAA,YASzCiB,IAAA,CAAKP,IAAL,CAAU,IAAV,EATyC;AAAA,Y,uCAAA;AAAA,YAUzCO,IAAA,CAAKP,IAAL,CAAU,GAAV,EAVyC;AAAA,SAA7C,M;;SAf+C;AAAA,Q,uCAAA;AAAA,QA2B/CO,IAAA,CAAKP,IAAL,CAAU,kBAAV,EA3B+C;AAAA,Q,uCAAA;AAAA,QA4B/CO,IAAA,CAAKP,IAAL,CAAU,GAAV,EA5B+C;AAAA,Q,uCAAA;AAAA,QA6B/C,IAAIkB,CAAJ,CA7B+C;AAAA,Q,uCAAA;AAAA,QA8B/CC,IAAA,CAAK,SAAOZ,IAAA,CAAKO,IAAL,CAAU,EAAV,CAAZ,EA9B+C;AAAA,Q,uCAAA;AAAA,QA+B/C,OAAOI,CAAP,CA/B+C;AAAA,KAA3C,CAtDZ;AAAA,I,uCAAA;AAAA,IAwFY1B,WAAA,CAAAE,SAAA,CAAAS,eAAA,GAAR,UAAwBD,IAAxB,EAAiD;AAAA,Q,uCAAA;AAAA,Q,uCAAA;AAAA,QAC7C,IAAIK,IAAA,GAAO,IAAIV,KAAJ,EAAX,CAD6C;AAAA,Q,uCAAA;AAAA,QAE7CU,IAAA,CAAKP,IAAL,CAAU,qBAAV,EAF6C;AAAA,Q,uCAAA;AAAA,QAG7CO,IAAA,CAAKP,IAAL,CAAU,sBAAV,EAH6C;AAAA,Q,uCAAA;AAAA,QAI7CO,IAAA,CAAKP,IAAL,CAAU,4BAAV,EAJ6C;AAAA,Q,uCAAA;AAAA,QAK7C,I,4CAAIE,IAAA,CAAKZ,I,CAAL,I,4CAAaY,IAAA,CAAKZ,IAAL,CAAU8B,MAAV,GAAmB,C,CAApC,EAAuC;AAAA,Y,0CAAA;AAAA,Y,uCAAA;AAAA,YACnCb,IAAA,CAAKP,IAAL,CAAU,cAAV,EADmC;AAAA,Y,uCAAA;AAAA,YAEnCE,IAAA,CAAKmB,MAAL,CAAYZ,OAAZ,CAAoB,UAACY,MAAD,EAASX,KAAT,EAAc;AAAA,gB,uCAAA;AAAA,gB,uCAAA;AAAA,gBAC9B,IAAIA,KAAA,GAAQ,CAAZ,EAAe;AAAA,oB,0CAAA;AAAA,oB,uCAAA;AAAA,oBACXH,IAAA,CAAKP,IAAL,CAAU,IAAV,EADW;AAAA,iBAAf,M;;iBAD8B;AAAA,gB,uCAAA;AAAA,gBAI9BO,IAAA,CAAKP,IAAL,CAAU,uBAAoBqB,MAAA,CAAOC,WAAP,EAApB,GAAyC,KAAnD,EAJ8B;AAAA,aAAlC,EAFmC;AAAA,Y,uCAAA;AAAA,YAQnCf,IAAA,CAAKP,IAAL,CAAU,IAAV,EARmC;AAAA,SAAvC,M;;SAL6C;AAAA,Q,uCAAA;AAAA,QAe7C,I,4CAAIE,IAAA,CAAKmB,M,CAAL,I,4CAAenB,IAAA,CAAKmB,MAAL,CAAYD,MAAZ,GAAqB,C,CAAxC,EAA2C;AAAA,Y,0CAAA;AAAA,Y,uCAAA;AAAA,YACvCb,IAAA,CAAKP,IAAL,CAAU,iBAAV,EADuC;AAAA,Y,uCAAA;AAAA,YAEvCO,IAAA,CAAKP,IAAL,CAAU,cAAV,EAFuC;AAAA,Y,uCAAA;AAAA,YAGvCE,IAAA,CAAKZ,IAAL,CAAUmB,OAAV,CAAkB,UAACnB,IAAD,EAAOoB,KAAP,EAAY;AAAA,gB,uCAAA;AAAA,gB,uCAAA;AAAA,gBAC1B,IAAIA,KAAA,GAAQ,CAAZ,EAAe;AAAA,oB,0CAAA;AAAA,oB,uCAAA;AAAA,oBACXH,IAAA,CAAKP,IAAL,CAAU,IAAV,EADW;AAAA,iBAAf,M;;iBAD0B;AAAA,gB,uCAAA;AAAA,gBAI1BO,IAAA,CAAKP,IAAL,CAAU,sBAAmBZ,KAAA,CAAMwB,aAAN,CAAoBtB,IAApB,CAAnB,GAA6C,uBAAvD,EAJ0B;AAAA,aAA9B,EAHuC;AAAA,Y,uCAAA;AAAA,YASvCiB,IAAA,CAAKP,IAAL,CAAU,IAAV,EATuC;AAAA,Y,uCAAA;AAAA,YAUvCO,IAAA,CAAKP,IAAL,CAAU,GAAV,EAVuC;AAAA,SAA3C,M;;SAf6C;AAAA,Q,uCAAA;AAAA,QA2B7CO,IAAA,CAAKP,IAAL,CAAU,kBAAV,EA3B6C;AAAA,Q,uCAAA;AAAA,QA4B7CO,IAAA,CAAKP,IAAL,CAAU,GAAV,EA5B6C;AAAA,Q,uCAAA;AAAA,QA6B7C,IAAIkB,CAAJ,CA7B6C;AAAA,Q,uCAAA;AAAA,QA8B7CC,IAAA,CAAK,SAAOZ,IAAA,CAAKO,IAAL,CAAU,EAAV,CAAZ,EA9B6C;AAAA,Q,uCAAA;AAAA,QA+B7C,OAAOI,CAAP,CA/B6C;AAAA,KAAzC,CAxFZ;AAAA,I,uCAAA;AAAA,IA0HY1B,WAAA,CAAAE,SAAA,CAAAU,eAAA,GAAR,UAAwBX,KAAxB,EAA2C;AAAA,Q,uCAAA;AAAA,Q,uCAAA;AAAA,QACvC,O,4CAAQA,KAAA,CAAMe,M,CAAN,I,4CAAgBf,KAAA,CAAMe,MAAN,CAAaY,MAAb,GAAsB,C,CAA9C,CADuC;AAAA,KAAnC,CA1HZ;AAAA,I,uCAAA;AAAA,IA6HA,OAAA5B,WAAA,CA7HA;AAAA,CAAA,EAAA,C;;AAAa+B,OAAA,CAAA/B,WAAA,GAAWA,WAAX","file":"filter.js","sourcesContent":["\"use strict\";\n\nimport * as StringUtils from \"underscore.string\";\nimport * as config from \"../config/proxy\";\nimport * as Utils from \"./utils\";\nimport * as path from \"path\"; \nimport {ApiProxy} from \"./proxy\";\n\nlet pathToRegexp = require('path-to-regexp');\n \nexport class ProxyFilter {\n    private proxy: ApiProxy;\n\n    constructor(proxy: ApiProxy) {\n        this.proxy = proxy;\n    }\n\n    buildFilters(proxy: config.Proxy) {\n        let filterChain = new Array<Function>();\n        if (proxy.target.allow) {\n            filterChain.push(this.buildAllowFilter(proxy.target.allow));\n        }\n        if (proxy.target.deny) {\n          filterChain.push(this.buildDenyFilter(proxy.target.deny));\n        }\n        if (this.hasCustomFilter(proxy)) {\n          filterChain.push(this.buildCustomFilter(proxy));\n        }\n        return filterChain;\n    }\n\n    private buildCustomFilter(proxy: config.Proxy) {\n        let func = new Array<string>();\n        func.push(\"function(req, res){\");\n        func.push(\"var accepted = true;\");\n        func.push(\"accepted = (\");\n        proxy.filter.forEach((filter, index)=>{\n            if (index > 0) {\n                func.push(\"&&\");                \n            }\n            func.push(\"(\");                \n            if (filter.appliesTo) {\n                func.push(\"!(\");                \n                filter.appliesTo.forEach((path,index)=>{\n                    if (index > 0) {\n                        func.push(\"||\");                \n                    }                \n                    func.push(\"(pathToRegexp('\"+Utils.normalizePath(path)+\"').test(req.path))\");\n\n                });\n                func.push(\") ? accepted :\");                \n            }\n            let p = path.join(this.proxy.gateway.middlewarePath, 'filter' ,filter.name);                \n            func.push(\"require('\"+p+\"')(req, res)\");\n            func.push(\")\");                \n        });\n        func.push(\");\");\n        func.push(\"return accepted;\");\n        func.push(\"}\");\n        let f;\n        eval('f = '+func.join('\\n'))\n        return f;\n    }\n\n    private buildAllowFilter(allow: config.TargetFilter) {\n        let func = new Array<string>();\n        func.push(\"function(req, res){\");\n        func.push(\"var accepted = true;\");\n        func.push(\"var targetPath = req.path;\");\n        if (allow.path && allow.path.length > 0) {\n            func.push(\"accepted = (\");\n            allow.method.forEach((method, index)=>{\n                if (index > 0) {\n                    func.push(\"||\");                \n                }\n                func.push(\"(req.method === '\"+method.toUpperCase()+\"')\")\n            });\n            func.push(\");\");\n        }\n        if (allow.method && allow.method.length > 0) {\n            func.push(\"if (accepted) {\");\n            func.push(\"accepted = (\");\n            allow.path.forEach((path, index)=>{\n                if (index > 0) {\n                    func.push(\"||\");                \n                }                \n                func.push(\"(pathToRegexp('\"+Utils.normalizePath(path)+\"').test(targetPath))\");\n            });\n            func.push(\");\");\n            func.push(\"}\");\n        }\n        func.push(\"return accepted;\");\n        func.push(\"}\");\n        let f;\n        eval('f = '+func.join(''))\n        return f;\n    }\n\n    private buildDenyFilter(deny: config.TargetFilter) {\n        let func = new Array<string>();\n        func.push(\"function(req, res){\");\n        func.push(\"var accepted = true;\");\n        func.push(\"var targetPath = req.path;\");\n        if (deny.path && deny.path.length > 0) {\n            func.push(\"accepted = (\");\n            deny.method.forEach((method, index)=>{\n                if (index > 0) {\n                    func.push(\"&&\");                \n                }\n                func.push(\"(req.method !== '\"+method.toUpperCase()+\"')\")\n            });\n            func.push(\");\");\n        }\n        if (deny.method && deny.method.length > 0) {\n            func.push(\"if (accepted) {\");\n            func.push(\"accepted = (\");\n            deny.path.forEach((path, index)=>{\n                if (index > 0) {\n                    func.push(\"&&\");                \n                }                \n                func.push(\"!(pathToRegexp('\"+Utils.normalizePath(path)+\"').test(targetPath))\");\n            });\n            func.push(\");\");\n            func.push(\"}\");\n        }\n        func.push(\"return accepted;\");\n        func.push(\"}\");\n        let f;\n        eval('f = '+func.join(''))\n        return f;\n    }\n\n    private hasCustomFilter(proxy: config.Proxy) {\n        return (proxy.filter && proxy.filter.length > 0);\n    }\n}  "]}