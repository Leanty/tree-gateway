{"version":3,"sources":["../../src/lib/proxy/proxy.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAKb,+BAAgC,gBAAgB,CAAC,CAAA;AACjD,yBAAuB,aAAa,CAAC,CAAA;AACrC,uBAA0B,UAAU,CAAC,CAAA;AAErC,IAAI,KAAK,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;AAO1C;IAAA;IA2CA,CAAC;IAjCG,wBAAK,GAAL,UAAM,GAAe;QACjB,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,EAAE,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACxG,CAAC;IAEO,iCAAc,GAAtB,UAAuB,KAAmB;QACtC,IAAI,MAAM,GAAG;YACT,WAAW,EAAE,UAAS,GAAoB,EAAE,GAAqB;gBAC7D,MAAM,CAAC,GAAG,CAAC,GAAG,CAAC;YACnB,CAAC;SACJ,CAAC;QACF,EAAE,CAAC,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,iBAAiB,CAAC,GAAI,KAAK,CAAC,eAAe,CAAC;QACvD,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC;YAChB,MAAM,CAAC,SAAS,CAAC,GAAI,KAAK,CAAC,OAAO,CAAC;QACvC,CAAC;QACD,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;YACd,MAAM,CAAC,OAAO,CAAC,GAAI,KAAK,CAAC,KAAK,CAAC;QACnC,CAAC;QACD,IAAI,WAAW,GAAoB,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;QACnE,EAAE,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;YACxC,MAAM,CAAC,QAAQ,CAAC,GAAG,UAAS,GAAG,EAAE,GAAG;gBAChC,IAAI,MAAM,GAAG,IAAI,CAAC;gBAClB,WAAW,CAAC,OAAO,CAAC,UAAA,CAAC;oBACjB,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;wBACT,MAAM,GAAG,CAAC,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;oBACzB,CAAC;gBACL,CAAC,CAAC,CAAC;gBACH,MAAM,CAAC,MAAM,CAAC;YAClB,CAAC,CAAC;QACN,CAAC;QACD,MAAM,CAAC,MAAM,CAAC;IAClB,CAAC;IAzCD;QAAC,uBAAM;;8CAAA;IAGP;QAAC,uBAAM;;4CAAA;IALX;QAAC,0BAAS;;gBAAA;IA4CV,eAAC;AAAD,CA3CA,AA2CC,IAAA;AA3CY,gBAAQ,WA2CpB,CAAA","file":"proxy.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as StringUtils from \"underscore.string\";\nimport * as config from \"../config\";\nimport {AutoWired, Inject} from \"typescript-ioc\";\nimport {Settings} from \"../settings\";\nimport {ProxyFilter} from \"./filter\";\n\nlet proxy = require(\"express-http-proxy\");\n\n/**\n * The API Proxy system. It uses [[express-http-proxy]](https://github.com/villadora/express-http-proxy)\n * to proxy requests to a target API.\n */\n@AutoWired\nexport class ApiProxy {\n    @Inject\n    private settings: Settings;\n\n    @Inject\n    private filter: ProxyFilter;\n\n    /**\n     * Configure a proxy for a given API\n     */\n    proxy(api: config.Api, ) {\n        this.settings.app.use(api.proxy.path, proxy(api.proxy.target.path, this.configureProxy(api.proxy)));\n    }\n    \n    private configureProxy(proxy: config.Proxy) {\n        let result = {\n            forwardPath: function(req: express.Request, res: express.Response) {\n                return req.url;//StringUtils.splice(req.originalUrl, 0, proxy.path.length-1);\n            }\n        };\n        if (proxy.preserveHostHdr) {\n            result['preserveHostHdr']  = proxy.preserveHostHdr; \n        }\n        if (proxy.timeout) {\n            result['timeout']  = proxy.timeout; \n        }\n        if (proxy.https) {\n            result['https']  = proxy.https; \n        }\n        let filterChain: Array<Function> = this.filter.buildFilters(proxy);\n        if (filterChain && filterChain.length > 0) {            \n            result['filter'] = function(req, res) {\n                let result = true;\n                filterChain.forEach(f=>{\n                    if (result) {\n                        result = f(req, res);\n                    } \n                });\n                return result;\n            }; \n        }\n        return result;\n    }\n}"]}