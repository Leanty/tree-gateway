{"version":3,"sources":["../../src/lib/proxy/proxy.ts"],"names":["filter_1","require","interceptor_1","proxy","ApiProxy","gateway","filter","ProxyFilter","interceptor","ProxyInterceptor","prototype","api","server","use","path","target","configureProxy","result","forwardPath","req","res","url","preserveHostHdr","timeout","https","filterChain","buildFilters","length","forEach","f","requestInterceptor","responseInterceptor","exports"],"mappings":"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","file":"proxy.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as StringUtils from \"underscore.string\";\nimport {ApiConfig} from \"../config/api\";\nimport {Proxy} from \"../config/proxy\";\nimport {ProxyFilter} from \"./filter\";\nimport {ProxyInterceptor} from \"./interceptor\";\nimport {Gateway} from \"../gateway\";\n\nlet proxy = require(\"express-http-proxy\");\n\n/**\n * The API Proxy system. It uses [[express-http-proxy]](https://github.com/villadora/express-http-proxy)\n * to proxy requests to a target API.\n */\nexport class ApiProxy {\n    private filter: ProxyFilter;\n    private interceptor: ProxyInterceptor;\n    gateway: Gateway;\n\n    constructor(gateway: Gateway) {\n        this.gateway = gateway;\n        this.filter = new ProxyFilter(this);\n        this.interceptor = new ProxyInterceptor(this);\n    }\n\n    /**\n     * Configure a proxy for a given API\n     */\n    proxy(api: ApiConfig, ) {\n        this.gateway.server.use(api.proxy.path, proxy(api.proxy.target.path, this.configureProxy(api.proxy)));\n    }\n    \n    private configureProxy(proxy: Proxy) {\n        let result = {\n            forwardPath: function(req: express.Request, res: express.Response) {\n                return req.url;\n            }\n        };\n        if (proxy.preserveHostHdr) {\n            result['preserveHostHdr']  = proxy.preserveHostHdr; \n        }\n        if (proxy.timeout) {\n            result['timeout']  = proxy.timeout; \n        }\n        if (proxy.https) {\n            result['https']  = proxy.https; \n        }\n        let filterChain: Array<Function> = this.filter.buildFilters(proxy);\n        if (filterChain && filterChain.length > 0) {            \n            result['filter'] = function(req, res) {\n                let result = true;\n                filterChain.forEach(f=>{\n                    if (result) {\n                        result = f(req, res);\n                    } \n                });\n                return result;\n            }; \n        }\n        let requestInterceptor: Function = this.interceptor.requestInterceptor(proxy);\n        if (requestInterceptor) {            \n            result['decorateRequest'] = requestInterceptor; \n        }\n        let responseInterceptor: Function = this.interceptor.responseInterceptor(proxy);\n        if (responseInterceptor) {            \n            result['intercept'] = responseInterceptor; \n        }\n        return result;\n    }\n}"]}