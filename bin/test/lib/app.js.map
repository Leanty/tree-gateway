{"version":3,"sources":["../../src/lib/app.ts"],"names":["express","require","logger","gateway_1","fs","compression","command_line_1","admin_server_1","path","typescript_rest_1","defaults","readJson","join","Parameters","rootDir","error","gatewayConfig","console","rootPath","apiPath","middlewarePath","app","gateway","Gateway","configureGatewayServer","module","exports","configureAdminServer","server","disable","use","get","accessLogStream","createWriteStream","flags","skip","req","res","statusCode","stream","initialize","listen","port","info","adminServer","Server","buildServices","APIService","adminPort"],"mappings":";;;;;;;;;AAEA,IAAYA,OAAA,GAAOC,OAAA,CAAM,SAAN,CAAnB,C;;AACA,IAAYC,MAAA,GAAMD,OAAA,CAAM,QAAN,CAAlB,C;;AACA,IAAAE,SAAA,GAAAF,OAAA,CAAsB,WAAtB,CAAA,C;;AACA,IAAYG,EAAA,GAAEH,OAAA,CAAM,UAAN,CAAd,C;;AACA,IAAYI,WAAA,GAAWJ,OAAA,CAAM,aAAN,CAAvB,C;;AACA,IAAAK,cAAA,GAAAL,OAAA,CAAyB,gBAAzB,CAAA,C;;AACA,IAAAM,cAAA,GAAAN,OAAA,CAAyB,sBAAzB,CAAA,C;;AACA,IAAYO,IAAA,GAAIP,OAAA,CAAM,MAAN,CAAhB,C;;AACA,IAAAQ,iBAAA,GAAAR,OAAA,CAAqB,iBAArB,CAAA,C;;AAGA,IAAIS,QAAA,GAAWT,OAAA,CAAQ,UAAR,CAAf,C;;AAEAG,EAAA,CAAGO,QAAH,CAAYH,IAAA,CAAKI,IAAL,CAAUN,cAAA,CAAAO,UAAA,CAAWC,OAArB,EAA6B,mBAA7B,CAAZ,EAA+D,UAACC,KAAD,EAAQC,aAAR,EAAoC;AAAA,I,sCAAA;AAAA,I,uCAAA;AAAA,IAC/F,IAAID,KAAJ,EAAW;AAAA,Q,yCAAA;AAAA,Q,uCAAA;AAAA,QACPE,OAAA,CAAQF,KAAR,CAAc,kDAAgDA,KAA9D,EADO;AAAA,KAAX,MAGK;AAAA,Q,yCAAA;AAAA,Q,uCAAA;AAAA,QACHC,aAAA,GAAiBN,QAAA,CAASM,aAAT,EAAwB;AAAA,YACrCE,QAAA,EAAWZ,cAAA,CAAAO,UAAA,CAAWC,OADe;AAAA,YAErCK,OAAA,EAAUX,IAAA,CAAKI,IAAL,CAAUN,cAAA,CAAAO,UAAA,CAAWC,OAAX,GAAoB,OAA9B,CAF2B;AAAA,YAGrCM,cAAA,EAAiBZ,IAAA,CAAKI,IAAL,CAAUN,cAAA,CAAAO,UAAA,CAAWC,OAAX,GAAoB,aAA9B,CAHoB;AAAA,SAAxB,CAAjB,CADG;AAAA,Q,uCAAA;AAAA,QAOH,IAAIO,GAAA,GAAMrB,OAAA,EAAV,CAPG;AAAA,Q,uCAAA;AAAA,QAQH,IAAIsB,OAAA,GAAmB,IAAInB,SAAA,CAAAoB,OAAJ,CAAYF,GAAZ,EAAiBL,aAAjB,CAAvB,CARG;AAAA,Q,uCAAA;AAAA,QASHQ,sBAAA,CAAuBF,OAAvB,EATG;AAAA,Q,uCAAA;AAAA,QAUHG,MAAA,CAAOC,OAAP,GAAiBL,GAAjB,CAVG;AAAA,Q,uCAAA;AAAA,QAYHM,oBAAA,GAZG;AAAA,KAJ0F;AAAA,CAAnG,E;AAqBA,SAAAH,sBAAA,CAAgCF,OAAhC,EAAuC;AAAA,I,sCAAA;AAAA,I,uCAAA;AAAA,IACrCA,OAAA,CAAQM,MAAR,CAAeC,OAAf,CAAuB,cAAvB,EADqC;AAAA,I,uCAAA;AAAA,IAErCP,OAAA,CAAQM,MAAR,CAAeE,GAAf,CAAmBzB,WAAA,EAAnB,EAFqC;AAAA,I,uCAAA;AAAA,IAMrC,IAAIiB,OAAA,CAAQM,MAAR,CAAeG,GAAf,CAAmB,KAAnB,KAA6B,YAAjC,EAA+C;AAAA,Q,yCAAA;AAAA,Q,uCAAA;AAAA,QAC7C,IAAMC,eAAA,GAAkB5B,EAAA,CAAG6B,iBAAH,CAAqBzB,IAAA,CAAKI,IAAL,CAAUN,cAAA,CAAAO,UAAA,CAAWC,OAArB,EAA8B,wBAA9B,CAArB,EAA6E,EAACoB,KAAA,EAAO,GAAR,EAA7E,CAAxB,CAD6C;AAAA,Q,uCAAA;AAAA,QAE7CZ,OAAA,CAAQM,MAAR,CAAeE,GAAf,CAAmB5B,MAAA,CAAO,QAAP,EAAiB;AAAA,YAClCiC,IAAA,EAAM,UAASC,GAAT,EAA+BC,GAA/B,EAAoD;AAAA,gB,sCAAA;AAAA,gB,uCAAA;AAAA,gBACtD,OAAOA,GAAA,CAAIC,UAAJ,GAAiB,GAAxB,CADsD;AAAA,aADxB;AAAA,YAIlCC,MAAA,EAAQP,eAJ0B;AAAA,SAAjB,CAAnB,EAF6C;AAAA,KAA/C,MAQK;AAAA,Q,yCAAA;AAAA,Q,uCAAA;AAAA,QACHV,OAAA,CAAQM,MAAR,CAAeE,GAAf,CAAmB5B,MAAA,CAAO,KAAP,CAAnB,EADG;AAAA,KAdgC;AAAA,I,uCAAA;AAAA,IAiBrCoB,OAAA,CAAQkB,UAAR,GAjBqC;AAAA,I,uCAAA;AAAA,IAkBrClB,OAAA,CAAQM,MAAR,CAAea,MAAf,CAAsBnC,cAAA,CAAAO,UAAA,CAAW6B,IAAjC,EAAuC,YAAA;AAAA,Q,sCAAA;AAAA,Q,uCAAA;AAAA,QACrCpB,OAAA,CAAQpB,MAAR,CAAeyC,IAAf,CAAoB,+BAApB,EAAqDrC,cAAA,CAAAO,UAAA,CAAW6B,IAAhE,EADqC;AAAA,KAAvC,EAlBqC;AAAA,C;AAuBvC,SAAAf,oBAAA,GAAA;AAAA,I,sCAAA;AAAA,I,uCAAA;AAAA,IACE,IAAIiB,WAAA,GAAc5C,OAAA,EAAlB,CADF;AAAA,I,uCAAA;AAAA,IAEE4C,WAAA,CAAYf,OAAZ,CAAoB,cAApB,EAFF;AAAA,I,uCAAA;AAAA,IAGEe,WAAA,CAAYd,GAAZ,CAAgBzB,WAAA,EAAhB,EAHF;AAAA,I,uCAAA;AAAA,IAIEuC,WAAA,CAAYd,GAAZ,CAAgB5B,MAAA,CAAO,KAAP,CAAhB,EAJF;AAAA,I,uCAAA;AAAA,IAMEO,iBAAA,CAAAoC,MAAA,CAAOC,aAAP,CAAqBF,WAArB,EAAkCrC,cAAA,CAAAwC,UAAlC,EANF;AAAA,I,uCAAA;AAAA,IAOEH,WAAA,CAAYH,MAAZ,CAAmBnC,cAAA,CAAAO,UAAA,CAAWmC,SAA9B,EAAyC,YAAA;AAAA,Q,sCAAA;AAAA,KAAzC,EAPF;AAAA,I,uCAAA;AAAA,IAUE,OAAOJ,WAAP,CAVF;AAAA","file":"app.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport {Gateway} from \"./gateway\";\nimport * as fs from \"fs-extra\";\nimport * as compression from \"compression\";\nimport {Parameters} from \"./command-line\";\nimport {APIService} from \"./admin/admin-server\";\nimport * as path from \"path\";\nimport {Server} from \"typescript-rest\";\nimport {GatewayConfig} from \"./config/gateway\";\n\nlet defaults = require('defaults');\n\nfs.readJson(path.join(Parameters.rootDir,'tree-gateway.json'), (error, gatewayConfig: GatewayConfig)=>{\n    if (error) {\n        console.error(\"Error reading tree-gateway.json config file: \"+error);\n    }\n    else {\n      gatewayConfig =  defaults(gatewayConfig, {\n          rootPath : Parameters.rootDir,\n          apiPath : path.join(Parameters.rootDir +'/apis'),\n          middlewarePath : path.join(Parameters.rootDir +'/middleware')\n      });\n\n      let app = express();\n      let gateway: Gateway = new Gateway(app, gatewayConfig);\n      configureGatewayServer(gateway);\n      module.exports = app;\n\n      configureAdminServer();\n    }\n\n});\n\nfunction configureGatewayServer(gateway) {\n  gateway.server.disable('x-powered-by'); \n  gateway.server.use(compression());\n  //app.enable('trust proxy'); // If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n\n\n  if (gateway.server.get('env') == 'production') {\n    const accessLogStream = fs.createWriteStream(path.join(Parameters.rootDir, 'logs/access_errors.log'),{flags: 'a'});\n    gateway.server.use(logger('common', {\n      skip: function(req: express.Request, res: express.Response) { \n          return res.statusCode < 400 \n      }, \n      stream: accessLogStream }));\n  } \n  else {\n    gateway.server.use(logger('dev'));\n  }\n  gateway.initialize();\n  gateway.server.listen(Parameters.port, ()=>{\n    gateway.logger.info('Gateway listenning on port %d', Parameters.port);\n  });\n}\n\nfunction configureAdminServer() {\n  let adminServer = express();\n  adminServer.disable('x-powered-by'); \n  adminServer.use(compression());\n  adminServer.use(logger('dev'));\n\n  Server.buildServices(adminServer, APIService);\n  adminServer.listen(Parameters.adminPort, ()=>{\n    // winston.info('Gateway Admin API listenning on port %d', Parameters.adminPort);\n  });\n  return adminServer;\n}\n"]}