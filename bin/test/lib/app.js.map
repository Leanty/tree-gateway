{"version":3,"sources":["../../src/lib/app.ts"],"names":["express","require","logger","gateway_1","fs","winston","typescript_ioc_1","compression","settings_1","path","StringUtils","rootDir","__dirname","process","argv","length","startsWith","join","cwd","provider","get","settings","Settings","app","apiPath","middlewarePath","Container","bind","add","transports","File","filename","gateway","Gateway","server","disable","use","accessLogStream","createWriteStream","flags","skip","req","res","statusCode","stream","initialize","listen","module","exports"],"mappings":"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","file":"app.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport {Gateway} from \"./gateway\";\nimport * as fs from \"fs-extra\";\nimport * as winston from \"winston\";\nimport {Container, Provider} from \"typescript-ioc\";\nimport * as compression from \"compression\";\nimport {Settings} from \"../lib/settings\";\nimport * as path from \"path\";\nimport * as StringUtils from \"underscore.string\";\n\nlet rootDir = __dirname;\n\nif (process.argv.length > 2) {\n  rootDir = process.argv[2];\n  if (StringUtils.startsWith(rootDir, '.')) {\n    rootDir = path.join(process.cwd(), rootDir);                \n  }\n  const provider: Provider = { \n    get: () => {\n      const settings: Settings = new Settings();\n      settings.app = express();\n      settings.apiPath = path.join(rootDir, 'apis');\n      settings.middlewarePath = path.join(rootDir ,'middleware');\n        return settings; \n    }\n  };\n\n  Container.bind(Settings).provider(provider)\n}\nwinston.add(winston.transports.File, { filename: path.join(rootDir, 'logs/gateway.log') });\nlet gateway: Gateway = Container.get(Gateway);\nlet app = gateway.server;\napp.disable('x-powered-by'); \napp.use(compression());\n//app.enable('trust proxy'); // If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n\n\nif (app.get('env') == 'production') {\n  const accessLogStream = fs.createWriteStream(path.join(rootDir, 'logs/access_errors.log'),{flags: 'a'});\n  app.use(logger('common', {\n    skip: function(req: express.Request, res: express.Response) { \n        return res.statusCode < 400 \n    }, \n    stream: accessLogStream }));\n} \nelse {\n  app.use(logger('dev'));\n}\n\ngateway.initialize();\napp.listen(3010);\nmodule.exports = app;\n\n"]}