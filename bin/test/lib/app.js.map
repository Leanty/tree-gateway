{"version":3,"sources":["../../src/lib/app.ts"],"names":["logger","require","gateway_1","fs","winston","typescript_ioc_1","compression","command_line_1","path","gateway","Container","get","Gateway","app","server","disable","use","accessLogStream","createWriteStream","join","Parameters","rootDir","flags","skip","req","res","statusCode","stream","initialize","listen","port","info","module","exports"],"mappings":";;;;;;;;;AAGA,IAAYA,MAAA,GAAMC,OAAA,CAAM,QAAN,CAAlB,C;;AACA,IAAAC,SAAA,GAAAD,OAAA,CAAsB,WAAtB,CAAA,C;;AACA,IAAYE,EAAA,GAAEF,OAAA,CAAM,UAAN,CAAd,C;;AACA,IAAYG,OAAA,GAAOH,OAAA,CAAM,SAAN,CAAnB,C;;AACA,IAAAI,gBAAA,GAAAJ,OAAA,CAAwB,gBAAxB,CAAA,C;;AACA,IAAYK,WAAA,GAAWL,OAAA,CAAM,aAAN,CAAvB,C;;AACA,IAAAM,cAAA,GAAAN,OAAA,CAAyB,gBAAzB,CAAA,C;;AACA,IAAYO,IAAA,GAAIP,OAAA,CAAM,MAAN,CAAhB,C;;AAEA,IAAIQ,OAAA,GAAmBJ,gBAAA,CAAAK,SAAA,CAAUC,GAAV,CAAcT,SAAA,CAAAU,OAAd,CAAvB,C;;AACA,IAAIC,GAAA,GAAMJ,OAAA,CAAQK,MAAlB,C;;AACAD,GAAA,CAAIE,OAAJ,CAAY,cAAZ,E;;AACAF,GAAA,CAAIG,GAAJ,CAAQV,WAAA,EAAR,E;;AAIA,IAAIO,GAAA,CAAIF,GAAJ,CAAQ,KAAR,KAAkB,YAAtB,EAAoC;AAAA,I,yCAAA;AAAA,I,uCAAA;AAAA,IAClC,IAAMM,eAAA,GAAkBd,EAAA,CAAGe,iBAAH,CAAqBV,IAAA,CAAKW,IAAL,CAAUZ,cAAA,CAAAa,UAAA,CAAWC,OAArB,EAA8B,wBAA9B,CAArB,EAA6E,EAACC,KAAA,EAAO,GAAR,EAA7E,CAAxB,CADkC;AAAA,I,uCAAA;AAAA,IAElCT,GAAA,CAAIG,GAAJ,CAAQhB,MAAA,CAAO,QAAP,EAAiB;AAAA,QACvBuB,IAAA,EAAM,UAASC,GAAT,EAA+BC,GAA/B,EAAoD;AAAA,Y,sCAAA;AAAA,Y,uCAAA;AAAA,YACtD,OAAOA,GAAA,CAAIC,UAAJ,GAAiB,GAAxB,CADsD;AAAA,SADnC;AAAA,QAIvBC,MAAA,EAAQV,eAJe;AAAA,KAAjB,CAAR,EAFkC;AAAA,CAApC,MAQK;AAAA,I,yCAAA;AAAA,I,uCAAA;AAAA,IACHJ,GAAA,CAAIG,GAAJ,CAAQhB,MAAA,CAAO,KAAP,CAAR,EADG;AAAA,C;;AAILS,OAAA,CAAQmB,UAAR,G;;AACAf,GAAA,CAAIgB,MAAJ,CAAWtB,cAAA,CAAAa,UAAA,CAAWU,IAAtB,EAA4B,YAAA;AAAA,I,sCAAA;AAAA,I,uCAAA;AAAA,IAC1B1B,OAAA,CAAQ2B,IAAR,CAAa,4BAAb,EAA2CxB,cAAA,CAAAa,UAAA,CAAWU,IAAtD,EAD0B;AAAA,CAA5B,E;;AAGAE,MAAA,CAAOC,OAAP,GAAiBpB,GAAjB","file":"app.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport {Gateway} from \"./gateway\";\nimport * as fs from \"fs-extra\";\nimport * as winston from \"winston\";\nimport {Container} from \"typescript-ioc\";\nimport * as compression from \"compression\";\nimport {Parameters} from \"./command-line\";\nimport * as path from \"path\";\n\nlet gateway: Gateway = Container.get(Gateway);\nlet app = gateway.server;\napp.disable('x-powered-by'); \napp.use(compression());\n//app.enable('trust proxy'); // If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n\n\nif (app.get('env') == 'production') {\n  const accessLogStream = fs.createWriteStream(path.join(Parameters.rootDir, 'logs/access_errors.log'),{flags: 'a'});\n  app.use(logger('common', {\n    skip: function(req: express.Request, res: express.Response) { \n        return res.statusCode < 400 \n    }, \n    stream: accessLogStream }));\n} \nelse {\n  app.use(logger('dev'));\n}\n\ngateway.initialize();\napp.listen(Parameters.port, ()=>{\n  winston.info('Gateway listenning port %d', Parameters.port);\n});\nmodule.exports = app;\n\n"]}