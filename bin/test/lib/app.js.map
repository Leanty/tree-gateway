{"version":3,"sources":["../../src/lib/app.ts"],"names":["express","require","logger","gateway_1","fs","winston","typescript_ioc_1","compression","command_line_1","admin_server_1","path","typescript_rest_1","gateway","Container","get","Gateway","app","configureGatewayServer","module","exports","configureAdminServer","server","disable","use","accessLogStream","createWriteStream","join","Parameters","rootDir","flags","skip","req","res","statusCode","stream","initialize","listen","port","info","adminServer","Server","buildServices","APIService","adminPort"],"mappings":"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","file":"app.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport {Gateway} from \"./gateway\";\nimport * as fs from \"fs-extra\";\nimport * as winston from \"winston\";\nimport {Container} from \"typescript-ioc\";\nimport * as compression from \"compression\";\nimport {Parameters} from \"./command-line\";\nimport {APIService} from \"./admin/admin-server\";\nimport * as path from \"path\";\nimport {Server} from \"typescript-rest\";\n\nlet gateway: Gateway = Container.get(Gateway);\nlet app = configureGatewayServer();\nmodule.exports = app;\n\nconfigureAdminServer();\n\nfunction configureGatewayServer() {\n  let app = gateway.server;\n  app.disable('x-powered-by'); \n  app.use(compression());\n  //app.enable('trust proxy'); // If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n\n\n  if (app.get('env') == 'production') {\n    const accessLogStream = fs.createWriteStream(path.join(Parameters.rootDir, 'logs/access_errors.log'),{flags: 'a'});\n    app.use(logger('common', {\n      skip: function(req: express.Request, res: express.Response) { \n          return res.statusCode < 400 \n      }, \n      stream: accessLogStream }));\n  } \n  else {\n    app.use(logger('dev'));\n  }\n  gateway.initialize();\n  app.listen(Parameters.port, ()=>{\n    winston.info('Gateway listenning on port %d', Parameters.port);\n  });\n\n  return app;\n}\n\nfunction configureAdminServer() {\n  let adminServer = express();\n  adminServer.disable('x-powered-by'); \n  adminServer.use(compression());\n  adminServer.use(logger('dev'));\n\n  Server.buildServices(adminServer, APIService);\n  adminServer.listen(Parameters.adminPort, ()=>{\n    winston.info('Gateway Admin API listenning on port %d', Parameters.adminPort);\n  });\n  return adminServer;\n}\n\n"]}