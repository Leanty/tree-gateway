{"version":3,"sources":["../../src/lib/config/proxy.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC","file":"proxy.js","sourcesContent":["\"use strict\";\n\n/**\n * Configuration for the API proxy engine.\n */\nexport interface Proxy {\n    /**\n     * The path where the gateway will listen for requests that should be proxied\n     * for the current API.\n     */\n    path: string;\n    /**\n     * The target address of the proxied API. You can force the protocol to be \n     * used on the URL, as:\n     * ```\n     * \"target\": {\n     *      \"path\": \"http://httpbin.org\",\n     *  }\n     * \n     * ```\n     * \n     * Or you can leave the decision for the gateway:\n     * \n     * \"target\": {\n     *      \"path\": \"httpbin.org\",\n     *  }\n     * \n     * So the gateway will use the same protocol used to access the gateway for the \n     * request to the target.\n     * \n     * If you want to force https for the target API request, use the https option.  \n     */\n    target: Target;\n    /**\n     * If set to true, will enforce the requests to the API target to use HTTPS protocol.\n     * f your path already define a protocol on target URL, this option is ignored.\n     */\n    https?: boolean\n    /**\n     * Add filters to the request pipeline. A Filter is a function that receives\n     * the request and the response object and must return a boolean value to inform\n     * it the given request should target the destination API or if it should be ignored.\n     * \n     * Example:\n     * ```\n     * module.exports = function (req, res) {\n     *   return true;\n     * };\n     * ```\n     * \n     * Each filter must be defined on its own .js file (placed on middleware/filter folder)\n     * and the fileName must match: <filterName>.js. \n     * \n     * So, the above filter should be saved in a file called myFilter.js and configured as:\n     * ```\n     * filter:[\n     *   {name: \"myFilter\"}\n     * ]\n     * ``` \n     */\n    filter?: Array<Filter>,\n    /**\n     * Add interceptors to the request pipeline. An Interceptor is a function that receives\n     * the request or the response object and can modify these objects.\n     * \n     * You can define two types of interceptors: Request Interceptors or Response Interceptors.\n     * \n     * Example of a request interceptor:\n     * ```\n     * module.exports = function(proxyReq, originalReq) {\n     *    // you can update headers \n     *    proxyReq.headers['Content-Type'] = 'text/html';\n     *    // you can change the method \n     *    proxyReq.method = 'GET';\n     *    // you can munge the bodyContent. \n     *    proxyReq.bodyContent = proxyReq.bodyContent.replace(/losing/, 'winning!');\n     *    return proxyReq;\n     * };\n     * ```\n     * \n     * Example of a response interceptor:\n     * ```\n     * module.exports = function(rsp, data, req, res, callback) {\n     *    // rsp - original response from the target \n     *    data = JSON.parse(data.toString('utf8'));\n     *    callback(null, JSON.stringify(data));\n     *    // callback follow the node conventions ```callback(error, value)```\n     * };\n     * ```\n     * \n     * Each interceptor must be defined on its own .js file (placed on middleware/interceptor/[request | response] folder)\n     * and the fileName must match: <interceptorName>.js. \n     * \n     * So, the above request interceptor should be saved in a file called \n     * middleware/interceptor/request/myRequestInterceptor.js and configured as:\n     * \n     * ```\n     * interceptor:{\n     *    request: [\"myRequestInterceptor\"]\n     * }\n     * ```\n     * \n     * If more than one request or response interceptor are defined, they are executed in declaration order. \n     */\n    interceptor?: Interceptors,\n    preserveHostHdr?: boolean;\n    timeout?: number;\n}\n\n/**\n * Add filters to the request pipeline. A Filter is a function that receives\n * the request and the response object and must return a boolean value to inform\n * it the given request should target the destination API or if it should be ignored.\n */\nexport interface Filter {\n    /**\n     * The filter name.\n     */\n    name: string,\n    /**\n     * A list of paths that should be filtered by this filter. If not provided, all paths\n     * will be filtered.\n     * Defaults to *.\n     */\n    appliesTo?: Array<string>;\n}\n\n/**\n * Add interceptors to the request pipeline. An Interceptor is a function that receives\n * the request or the response object and can modify these objects.\n */\nexport interface Interceptors {\n    /**\n     * A list of request interceptors\n     */\n    request: Array<Interceptor>;\n    /**\n     * A list of response interceptors\n     */\n    response: Array<Interceptor>;\n}\n\n/**\n * An Interceptor is a function that receives\n * the request or the response object and can modify these objects.\n */\nexport interface Interceptor {\n    /**\n     * The interceptor name.\n     */\n    name: string,\n    /**\n     * A list of paths that should be intercepted by this interceptor. If not provided, all paths\n     * will be intercepted.\n     * Defaults to *.\n     */\n    appliesTo?: Array<string>;\n}\n\nexport interface Target {\n    path: string;\n    allow?: TargetFilter;\n    deny?: TargetFilter;\n}\n\nexport interface TargetFilter {\n    path: Array<string>;\n    method: Array<string>;\n}\n\n\n"]}