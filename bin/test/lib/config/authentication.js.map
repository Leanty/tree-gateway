{"version":3,"sources":["../../src/lib/config/authentication.ts"],"names":["Joi","require","JWTRequestExtractorSchema","object","keys","header","string","queryParam","authHeader","bodyField","cookie","JWTAuthenticationSchema","secretOrKey","required","extractFrom","issuer","audience","algorithms","array","items","ignoreExpiration","boolean","verify","BasicAuthenticationSchema","LocalAuthenticationSchema","usernameField","passwordField","exports","AuthenticationValidatorSchema","jwt","basic","local","xor","validateAuthenticationConfig","authentication","callback","validate"],"mappings":";;;;;;;;;AAEA,IAAYA,GAAA,GAAGC,OAAA,CAAM,KAAN,CAAf,C;;AA+EA,IAAIC,yBAAA,GAA4BF,GAAA,CAAIG,MAAJ,GAAaC,IAAb,CAAkB;AAAA,IAC9CC,MAAA,EAAQL,GAAA,CAAIM,MAAJ,EADsC;AAAA,IAE9CC,UAAA,EAAYP,GAAA,CAAIM,MAAJ,EAFkC;AAAA,IAG9CE,UAAA,EAAYR,GAAA,CAAIM,MAAJ,EAHkC;AAAA,IAI9CG,SAAA,EAAWT,GAAA,CAAIM,MAAJ,EAJmC;AAAA,IAK9CI,MAAA,EAAQV,GAAA,CAAIM,MAAJ,EALsC;AAAA,CAAlB,CAAhC,C;;AAQA,IAAIK,uBAAA,GAA0BX,GAAA,CAAIG,MAAJ,GAAaC,IAAb,CAAkB;AAAA,IAC5CQ,WAAA,EAAaZ,GAAA,CAAIM,MAAJ,GAAaO,QAAb,EAD+B;AAAA,IAE5CC,WAAA,EAAaZ,yBAF+B;AAAA,IAG5Ca,MAAA,EAAQf,GAAA,CAAIM,MAAJ,EAHoC;AAAA,IAI5CU,QAAA,EAAUhB,GAAA,CAAIM,MAAJ,EAJkC;AAAA,IAK5CW,UAAA,EAAYjB,GAAA,CAAIkB,KAAJ,GAAYC,KAAZ,CAAkBnB,GAAA,CAAIM,MAAJ,EAAlB,CALgC;AAAA,IAM5Cc,gBAAA,EAAkBpB,GAAA,CAAIqB,OAAJ,EAN0B;AAAA,IAO5CC,MAAA,EAAQtB,GAAA,CAAIM,MAAJ,EAPoC;AAAA,CAAlB,CAA9B,C;;AAUA,IAAIiB,yBAAA,GAA4BvB,GAAA,CAAIG,MAAJ,GAAaC,IAAb,CAAkB,EAC9CkB,MAAA,EAAQtB,GAAA,CAAIM,MAAJ,GAAaO,QAAb,EADsC,EAAlB,CAAhC,C;;AAIA,IAAIW,yBAAA,GAA4BxB,GAAA,CAAIG,MAAJ,GAAaC,IAAb,CAAkB;AAAA,IAC9CkB,MAAA,EAAQtB,GAAA,CAAIM,MAAJ,GAAaO,QAAb,EADsC;AAAA,IAE9CY,aAAA,EAAezB,GAAA,CAAIM,MAAJ,EAF+B;AAAA,IAG9CoB,aAAA,EAAe1B,GAAA,CAAIM,MAAJ,EAH+B;AAAA,CAAlB,CAAhC,C;;AAMWqB,OAAA,CAAAC,6BAAA,GAAgC5B,GAAA,CAAIG,MAAJ,GAAaC,IAAb,CAAkB;AAAA,IACzDyB,GAAA,EAAKlB,uBADoD;AAAA,IAEzDmB,KAAA,EAAOP,yBAFkD;AAAA,IAGzDQ,KAAA,EAAOP,yBAHkD;AAAA,CAAlB,EAIxCQ,GAJwC,CAIpC,KAJoC,EAI7B,OAJ6B,EAIpB,OAJoB,CAAhC,C;AAMX,SAAAC,4BAAA,CAA6CC,cAA7C,EAAmFC,QAAnF,EAA+G;AAAA,I,sCAAA;AAAA,I,sCAAA;AAAA,IAC3GnC,GAAA,CAAIoC,QAAJ,CAAaF,cAAb,EAA6BP,OAAA,CAAAC,6BAA7B,EAA4DO,QAA5D,EAD2G;AAAA,C;;AAA/FR,OAAA,CAAAM,4BAAA,GAA4BA,4BAA5B","file":"authentication.js","sourcesContent":["\"use strict\";\n\nimport * as Joi from \"joi\";\n\nexport interface AuthenticationConfig {\n    jwt?: JWTAuthentication;\n    basic?: BasicAuthentication;\n    local?: LocalAuthentication;\n}\n\nexport interface BasicAuthentication {\n    /**\n     * Is a function with the parameters verify(userid, password, done) {\n     *  - userid The username.\n     *  - password The password.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify: string;\n}\n\nexport interface LocalAuthentication {\n    /**\n     * Is a function with the parameters verify(userid, password, done) {\n     *  - userid The username.\n     *  - password The password.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify: string;\n    /**\n     * Optional, defaults to 'username'\n     */\n    usernameField?: string;\n    /**\n     * Optional, defaults to 'password'\n     */\n    passwordField?: string;\n}\n\nexport interface JWTAuthentication {\n    /**\n     * Is a REQUIRED string or buffer containing the secret (symmetric) \n     * or PEM-encoded public key (asymmetric) for verifying the token's signature.\n     */\n    secretOrKey:string;\n    /**\n     * Defines how the JWT token will be extracted from request.\n     */\n    extractFrom?: JWTRequestExtractor; \n    /**\n     * If defined the token issuer (iss) will be verified against this value.\n     */\n    issuer?: string;\n    /**\n     * If defined, the token audience (aud) will be verified against this value.\n     */\n    audience?: string;\n    /**\n     * List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\n     */\n    algorithms?: Array<string>;\n    /**\n     * If true do not validate the expiration of the token.\n     */\n    ignoreExpiration?: boolean;\n    /**\n     * Is a function with the parameters verify(request, jwt_payload, done) \n     *  - request The user request.\n     *  - jwt_payload is an object literal containing the decoded JWT payload.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify?: string;\n}\n\nexport interface JWTRequestExtractor {\n    header?: string;\n    queryParam?: string;\n    authHeader?: string;\n    bodyField?: string;\n    cookie?: string;\n}\n\nlet JWTRequestExtractorSchema = Joi.object().keys({\n    header: Joi.string(),\n    queryParam: Joi.string(),\n    authHeader: Joi.string(),\n    bodyField: Joi.string(),\n    cookie: Joi.string()\n});\n\nlet JWTAuthenticationSchema = Joi.object().keys({\n    secretOrKey: Joi.string().required(),\n    extractFrom: JWTRequestExtractorSchema,\n    issuer: Joi.string(),\n    audience: Joi.string(),\n    algorithms: Joi.array().items(Joi.string()),\n    ignoreExpiration: Joi.boolean(),\n    verify: Joi.string()\n});\n\nlet BasicAuthenticationSchema = Joi.object().keys({\n    verify: Joi.string().required()\n});\n\nlet LocalAuthenticationSchema = Joi.object().keys({\n    verify: Joi.string().required(),\n    usernameField: Joi.string(),\n    passwordField: Joi.string()\n});\n\nexport let AuthenticationValidatorSchema = Joi.object().keys({\n    jwt: JWTAuthenticationSchema,\n    basic: BasicAuthenticationSchema,\n    local: LocalAuthenticationSchema,\n}).xor('jwt', 'basic', 'local');\n\nexport function validateAuthenticationConfig(authentication: AuthenticationConfig, callback: (err, value)=>void) {\n    Joi.validate(authentication, AuthenticationValidatorSchema, callback);\n}"]}