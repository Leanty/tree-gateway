{"version":3,"sources":["../../src/lib/config/gateway.ts"],"names":["Joi","require","LogLevel","exports","LogConsoleConfigSchema","object","keys","timestamp","boolean","silent","colorize","json","stringify","prettyPrint","depth","number","positive","humanReadableUnhandledException","showLevel","stderrLevels","array","items","string","allow","LogFileConfigSchema","filename","regex","maxsize","maxFiles","eol","logstash","tailable","maxRetries","zippedArchive","with","LoggerConfigSchema","level","console","file","RedisConfigSchema","host","hostname","required","port","AccessLoggerConfigSchema","GatewayConfigValidatorSchema","listenPort","adminPort","rootPath","apiPath","middlewarePath","underProxy","logger","database","accessLogger","validateGatewayConfig","gatewayConfig","callback","validate"],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as Joi from \"joi\";\n\n/**\n * The API config descriptor.\n */\nexport interface GatewayConfig {\n    /**\n     * The gateway port\n     */\n    listenPort: number;\n    /**\n     * The gateway admin server port\n     */\n    adminPort: number;\n    /**\n     * The root folder where the gateway will work.\n     */\n    rootPath?: string;\n    /**\n     * Folder where the gateway will search for installed APIs.\n     */\n    apiPath?: string;\n    /**\n     * Folder where the gateway will search for its middleware functions.\n     */\n    middlewarePath?: string;\n    /**\n     * If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc)\n     */\n    underProxy?: boolean;\n    /**\n     * Configurations for gateway logger.\n     */\n    logger?: LoggerConfig;\n    /**\n     * Configurations for gateway database (REDIS).\n     */\n    database?: RedisConfig;\n    /**\n     * Configurations for gateway logger.\n     */\n    accessLogger?: AccessLoggerConfig;\n}\n\nexport interface AccessLoggerConfig {\n    \n}\n\nexport interface RedisConfig {\n    host: string;\n    port: number;\n}\n\nexport interface LoggerConfig {\n    /**\n     * Level of messages that this logger should log.\n     */\n    level?: string;\n    console?: LogConsoleConfig;\n    file?: LogFileConfig;\n}\n\nexport interface LogConsoleConfig {\n    /**\n     * flag indicating if we should prepend output with timestamps (default true). \n     */\n    timestamp?: boolean;\n    /**\n     * Flag indicating whether to suppress output.\n     */\n    silent?: boolean; \n    /**\n     * Flag indicating if we should colorize output.\n     */\n    colorize?: boolean; \n    /**\n     * If true, messages will be logged as JSON (default true).\n     */\n    json?: boolean;\n    /**\n     * Flag indiciating if the output should be passed through JSON.stringify, \n     * resulting in single-line output. Most useful when used in conjunction with \n     * the json flag. (default false)\n     */\n    stringify?: boolean; \n    /**\n     * If true, additional JSON metadata objects that are added to logging string \n     * messages will be displayed as a JSON string representation.  \n     */\n    prettyPrint?: boolean;\n    /**\n     * Numeric indicating how many times to recurse while formatting the object with util.inspect \n     * (only used with prettyPrint: true) \n     * (default null, unlimited)\n     */\n    depth?: number; \n    /**\n     * Flag indicating if uncaught exception should be output as human readable, instead of a single line\n     */\n    humanReadableUnhandledException?: boolean; \n    /**\n     * Flag indicating if we should prepend output with level (default true).\n     */\n    showLevel?: boolean;\n    /**\n     * Array of strings containing the levels to log to stderr instead of stdout, for example \n     * ['error', 'debug', 'info']. (default ['error', 'debug'])\n     */\n    stderrLevels?: Array<string>;     \n}\n\nexport interface LogFileConfig {\n    /**\n     * The filename of the logfile to write output to.\n     */\n    filename?: string;\n    /**\n     * flag indicating if we should prepend output with timestamps (default true). \n     */\n    timestamp?: boolean;\n    /**\n     * Flag indicating whether to suppress output.\n     */\n    silent?: boolean; \n    /**\n     * Flag indicating if we should colorize output.\n     */\n    colorize?: boolean; \n    /**\n     * Max size in bytes of the logfile, if the size is exceeded then a new file is created, \n     * a counter will become a suffix of the log file. \n     */\n    maxsize?: number; \n    /**\n     * Limit the number of files created when the size of the logfile is exceeded.\n     */\n    maxFiles?: number;\n    /**\n     * If true, messages will be logged as JSON (default true).\n     */\n    json?: boolean;\n    /**\n     * String indicating the end-of-line characters to use (default to \\n).\n     */\n    eol?: string;\n    /**\n     * If true, additional JSON metadata objects that are added to logging string \n     * messages will be displayed as a JSON string representation.  \n     */\n    prettyPrint?: boolean;\n    /**\n     * Numeric indicating how many times to recurse while formatting the object with util.inspect \n     * (only used with prettyPrint: true) \n     * (default null, unlimited)\n     */\n    depth?: number; \n    /**\n     * If true, messages will be logged as JSON and formatted for logstash (default false).\n     */\n    logstash?: boolean;\n    /**\n     * Flag indicating if we should prepend output with level (default true).\n     */\n    showLevel?: boolean;\n    /**\n     * If true, log files will be rolled based on maxsize and maxfiles, but in ascending order. \n     * The filename will always have the most recent log lines. The larger the appended number, \n     * the older the log file. \n     * This option requires maxFiles to be set, or it will be ignored.\n     */\n    tailable?: boolean;\n    /**\n     * The number of stream creation retry attempts before entering a failed state. \n     * In a failed state the transport stays active but performs a NOOP on it's log function. \n     * (default 2)\n     */\n    maxRetries?: number;\n    /**\n     * If true, all log files but the current one will be zipped.\n     */\n    zippedArchive?: boolean;\n}\n\nexport enum LogLevel {\n    error, info, debug\n}\n\nlet LogConsoleConfigSchema = Joi.object().keys({\n    timestamp: Joi.boolean(),\n    silent: Joi.boolean(), \n    colorize: Joi.boolean(), \n    json: Joi.boolean(),\n    stringify: Joi.boolean(), \n    prettyPrint: Joi.boolean(),\n    depth: Joi.number().positive(), \n    humanReadableUnhandledException: Joi.boolean(), \n    showLevel: Joi.boolean(),\n    stderrLevels: Joi.array().items(Joi.string().allow('error', 'info', 'debug')) \n});\n\nlet LogFileConfigSchema = Joi.object().keys({\n    filename: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    timestamp: Joi.boolean(),\n    silent: Joi.boolean(), \n    colorize: Joi.boolean(), \n    maxsize: Joi.number().positive(), \n    maxFiles: Joi.number().positive(),\n    json: Joi.boolean(),\n    eol: Joi.string(),\n    prettyPrint: Joi.boolean(),\n    depth: Joi.number().positive(), \n    logstash: Joi.boolean(),\n    showLevel: Joi.boolean(),\n    tailable: Joi.boolean(),\n    maxRetries: Joi.number().positive(),\n    zippedArchive: Joi.boolean()    \n}).with('depth','prettyPrint').with('tailable', 'maxFiles');\n\nlet LoggerConfigSchema = Joi.object().keys({\n    level: Joi.string().allow('error', 'info', 'debug'),\n    console: LogConsoleConfigSchema,\n    file: LogFileConfigSchema\n});\n\nlet RedisConfigSchema = Joi.object().keys({\n    host: Joi.string().hostname().required(),\n    port: Joi.number().positive().required()\n});\n\nlet AccessLoggerConfigSchema = Joi.object().keys({\n});\n\nexport let GatewayConfigValidatorSchema = Joi.object().keys({\n    listenPort: Joi.number().positive().required(),\n    adminPort: Joi.number().positive().required(),\n    rootPath: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    apiPath: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    middlewarePath: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    underProxy: Joi.boolean(),\n    logger: LoggerConfigSchema,\n    database: RedisConfigSchema,\n    accessLogger: AccessLoggerConfigSchema\n});\n\nexport function validateGatewayConfig(gatewayConfig: GatewayConfig, callback: (err, value)=>void) {\n    Joi.validate(gatewayConfig, GatewayConfigValidatorSchema, callback);\n}"]}