{"version":3,"sources":["../../src/lib/authentication/strategies/jwt.ts"],"names":["passport","require","passport_jwt_1","Utils","pathUtil","module","exports","apiKey","authConfig","gateway","opts","omit","extractFrom","extractors","keys","length","getExtractor","requestExtractors_1","Array","forEach","extractor","push","ExtractJwt","fromAuthHeader","verifyFunction","verify","p","join","middlewarePath","jwtPayload","done","use","Strategy","param","fromHeader","fromUrlQueryParameter","fromAuthHeaderWithScheme","fromBodyField","req","token","cookies"],"mappings":"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","file":"jwt.js","sourcesContent":["\"use strict\";\n\nimport * as passport from 'passport';\nimport {Strategy, ExtractJwt} from 'passport-jwt';\nimport {Gateway} from \"../../gateway\"; \nimport {JWTAuthentication} from \"../../config/authentication\";\nimport * as Utils from \"underscore\";\nimport * as pathUtil from \"path\"; \n\nmodule.exports = function (apiKey: string, authConfig: JWTAuthentication, gateway: Gateway) {\n    let opts = Utils.omit(authConfig, \"extractFrom\", \"verify\");\n    if (authConfig.extractFrom) {\n        let extractors: Array<string> = Utils.keys(authConfig.extractFrom);\n        if (extractors.length == 1){\n            opts['jwtFromRequest'] = getExtractor(extractors[0], authConfig.extractFrom[extractors[0]]);\n        }\n        else {\n            let requestExtractors = new Array<any>()\n            Utils.keys(authConfig.extractFrom).forEach(extractor=>{\n                requestExtractors.push(getExtractor(extractor, authConfig.extractFrom[extractor]));\n            });\n            opts['jwtFromRequest'] = ExtractJwt['fromExtractors'](requestExtractors);\n        }\n    }\n    else {\n        opts['jwtFromRequest'] = ExtractJwt.fromAuthHeader();\n    }\n    let verifyFunction;\n    if (authConfig.verify) {\n        opts['passReqToCallback'] = true;\n        let p = pathUtil.join(gateway.middlewarePath, 'authentication', 'verify', authConfig.verify);                \n        verifyFunction = require(p);\n    }\n    else {\n        verifyFunction = (jwtPayload, done) => {\n            done(null, jwtPayload);\n        };\n    }\n    passport.use(apiKey, new Strategy(opts, verifyFunction));\n};\n\nfunction getExtractor(extractor: string, param: string) {\n    switch(extractor) {\n        case 'header': return ExtractJwt.fromHeader(param);\n        case 'queryParam': return ExtractJwt.fromUrlQueryParameter(param);\n        case 'authHeader': return ExtractJwt.fromAuthHeaderWithScheme(param);\n        case 'bodyField': return ExtractJwt.fromBodyField(param);\n        case 'cookie': return (req)=>{\n            let token = null;\n            if (req && req.cookies)\n            {\n                token = req.cookies[param];\n            }\n            return token;\n        };            \n    }\n\n    return ExtractJwt.fromAuthHeader();\n}\n"]}