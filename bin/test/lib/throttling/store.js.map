{"version":3,"sources":["../../src/lib/throttling/store.ts"],"names":["defaults","require","RedisStore","options","expiry","prefix","prototype","incr","key","cb","rdskey","opt","client","multi","ttl","exec","err","replies","expire","resetKey","del","exports"],"mappings":";;;;;;;;;AAEA,IAAIA,QAAA,GAAWC,OAAA,CAAQ,UAAR,CAAf,C;;AAQA,IAAAC,UAAA,GAAA,YAAA;AAAA,I,sCAAA;AAAA,IAGE,SAAAA,UAAA,CAAYC,OAAZ,EAA4B;AAAA,Q,sCAAA;AAAA,Q,sCAAA;AAAA,QAC1B,KAAKA,OAAL,GAAeH,QAAA,CAASG,OAAT,EAAkB;AAAA,YAC7BC,MAAA,EAAQ,EADqB;AAAA,YAE7BC,MAAA,EAAQ,KAFqB;AAAA,SAAlB,CAAf,CAD0B;AAAA,KAH9B;AAAA,I,sCAAA;AAAA,IAWEH,UAAA,CAAAI,SAAA,CAAAC,IAAA,GAAA,UAAMC,GAAN,EAAmBC,EAAnB,EAAqB;AAAA,Q,sCAAA;AAAA,Q,sCAAA;AAAA,QACnB,IAAIC,MAAA,GAAS,KAAKP,OAAL,CAAaE,MAAb,GAAsBG,GAAnC,CADmB;AAAA,Q,sCAAA;AAAA,QAEnB,IAAIG,GAAA,GAAe,KAAKR,OAAxB,CAFmB;AAAA,Q,sCAAA;AAAA,QAGnBQ,GAAA,CAAIC,MAAJ,CAAWC,KAAX,GACGN,IADH,CACQG,MADR,EAEGI,GAFH,CAEOJ,MAFP,EAGGK,IAHH,CAGQ,UAASC,GAAT,EAAcC,OAAd,EAAqB;AAAA,Y,sCAAA;AAAA,Y,sCAAA;AAAA,YACzB,IAAID,GAAJ,EAAS;AAAA,gB,yCAAA;AAAA,gB,uCAAA;AAAA,gBACP,OAAOP,EAAA,CAAGO,GAAH,CAAP,CADO;AAAA,aAAT,M;;aADyB;AAAA,Y,uCAAA;AAAA,YAMzB,I,2CAAIC,OAAA,CAAQ,CAAR,EAAW,CAAX,MAAkB,C,CAAlB,I,2CAAuBA,OAAA,CAAQ,CAAR,EAAW,CAAX,MAAkB,CAAC,C,CAA9C,EAAiD;AAAA,gB,yCAAA;AAAA,gB,uCAAA;AAAA,gBAE/CN,GAAA,CAAIC,MAAJ,CAAWM,MAAX,CAAkBR,MAAlB,EAA0BC,GAAA,CAAIP,MAA9B,EAF+C;AAAA,aAAjD,M;;aANyB;AAAA,Y,uCAAA;AAAA,YAWzBK,EAAA,CAAG,IAAH,EAASQ,OAAA,CAAQ,CAAR,EAAW,CAAX,CAAT,EAXyB;AAAA,SAH7B,EAHmB;AAAA,KAArB,CAXF;AAAA,I,uCAAA;AAAA,IAgCEf,UAAA,CAAAI,SAAA,CAAAa,QAAA,GAAA,UAASX,GAAT,EAAoB;AAAA,Q,sCAAA;AAAA,Q,uCAAA;AAAA,QAClB,IAAIE,MAAA,GAAS,KAAKP,OAAL,CAAaE,MAAb,GAAsBG,GAAnC,CADkB;AAAA,Q,uCAAA;AAAA,QAGlB,KAAKL,OAAL,CAAaS,MAAb,CAAoBQ,GAApB,CAAwBV,MAAxB,EAHkB;AAAA,KAApB,CAhCF;AAAA,I,uCAAA;AAAA,IAqCA,OAAAR,UAAA,CArCA;AAAA,CAAA,EAAA,C;;AAAamB,OAAA,CAAAnB,UAAA,GAAUA,UAAV","file":"store.js","sourcesContent":["'use strict';\nimport * as redis from \"ioredis\";\nlet defaults = require('defaults');\n\ninterface Options {\n    expiry?: number;\n    prefix?: string;\n    client: redis.Redis;\n}\n\nexport class RedisStore {\n  options: Options;\n  \n  constructor(options: Options) {\n    this.options = defaults(options, {\n        expiry: 60, // default expiry is one minute\n        prefix: \"rl:\"\n    });\n  }\n\n\n  incr (key: string, cb) {\n    let rdskey = this.options.prefix + key;\n    let opt: Options = this.options;\n    opt.client.multi()\n      .incr(rdskey)\n      .ttl(rdskey)\n      .exec(function(err, replies) {\n        if (err) {\n          return cb(err);\n        }\n\n        // if this is new or has no expiry\n        if (replies[0][1] === 1 || replies[1][1] === -1) {\n          // then expire it after the timeout\n          opt.client.expire(rdskey, opt.expiry);\n        }\n\n        cb(null, replies[0][1]);\n      });\n  }\n\n  resetKey(key: string) {\n    let rdskey = this.options.prefix + key;\n\n    this.options.client.del(rdskey);\n  }\n}"]}