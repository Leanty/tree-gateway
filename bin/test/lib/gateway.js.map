{"version":3,"sources":["../../src/lib/gateway.ts","gateway.js"],"names":["fs","require","StringUtils","proxy_1","Utils","throttling_1","auth_1","es5_compat_1","logger_1","dbConfig","path","defaults","Gateway","app","gatewayConfig","_config","rootPath","__dirname","apiPath","join","middlewarePath","_logger","Logger","config","logger","database","_redisClient","initializeRedis","apiProxy","ApiProxy","apiRateLimit","ApiRateLimit","apiAuth","ApiAuth","Object","defineProperty","prototype","get","enumerable","configurable","initialize","ready","_this","apis","StringMap","readdir","err","files","error","endsWith","length_1","length","forEach","fileName","index","readJson","apiConfig","loadApi","api","isInfoEnabled","info","name","proxy","apiKey","getApiKey","set","normalizePath","throttling","isDebugEnabled","debug","authentication","version","exports"],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as fs from \"fs-extra\";\nimport * as StringUtils from \"underscore.string\";\nimport {ApiConfig} from \"./config/api\";\nimport {GatewayConfig} from \"./config/gateway\";\nimport {ApiProxy} from \"./proxy/proxy\";\nimport * as Utils from \"./proxy/utils\";\nimport {ApiRateLimit} from \"./throttling/throttling\";\nimport {ApiAuth} from \"./authentication/auth\";\nimport {Set, StringMap} from \"./es5-compat\";\nimport {Logger} from \"./logger\";\nimport * as redis from \"ioredis\";\nimport * as dbConfig from \"./redis\";\nimport * as path from \"path\";\n\nlet defaults = require('defaults');\n\nexport class Gateway {\n    private app: express.Application;\n    private apiProxy: ApiProxy;\n    private apiRateLimit: ApiRateLimit;\n    private apiAuth: ApiAuth;\n    private apis: StringMap<ApiConfig>;\n    private _config: GatewayConfig;\n    private _logger: Logger;\n    private _redisClient: redis.Redis;\n\n    constructor(app: express.Application, gatewayConfig?: GatewayConfig) {\n        this._config = defaults(gatewayConfig, {\n            rootPath : __dirname,\n            apiPath : path.join(__dirname +'/apis'),\n            middlewarePath : path.join(__dirname +'/middleware')\n        });\n        \n        this.app = app;\n        this._logger = new Logger(this.config.logger, this);\n        if (this.config.database) {\n            this._redisClient = dbConfig.initializeRedis(this.config.database);\n        }\n        this.apiProxy = new ApiProxy(this);\n        this.apiRateLimit = new ApiRateLimit(this);\n        this.apiAuth = new ApiAuth(this);\n    }    \n    \n    get server(): express.Application {\n        return this.app;\n    }\n\n    get logger(): Logger {\n        return this._logger;\n    }\n\n    get config(): GatewayConfig {\n        return this._config;\n    }\n\n    get redisClient(): redis.Redis {\n        return this._redisClient;\n    }\n\n    get apiPath(): string {\n        return this.config.apiPath;\n    }\n\n    get middlewarePath(): string {\n        return this.config.middlewarePath;\n    }\n\n    initialize(ready?: () => void) {\n        this.apis = new StringMap<ApiConfig>();\n        let path = this.apiPath;\n        fs.readdir(path, (err, files) => {\n            if (err) {\n                this._logger.error(\"Error reading directory: \"+err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/'))?path:path+'/');\n                const length = files.length;\n                files.forEach((fileName, index) =>{\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path+fileName, (error, apiConfig: ApiConfig)=>{\n                            if (error) {\n                                this._logger.error(\"Error reading directory: \"+error);\n                            }\n                            else {\n                                this.loadApi(apiConfig, (length -1 === index)?ready: null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    loadApi(api: ApiConfig, ready?: () => void) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        let apiKey: string = this.getApiKey(api);\n        this.apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        \n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        \n        if (ready) {\n            ready();\n        }\n    }\n\n    private getApiKey(api: ApiConfig) {\n        return api.name + (api.version? '_'+api.version: '_default');\n    }\n}\n/*TODO: \n- Create a file for Gateway configurations:\n  - Global interceptors / Filters / Throttling\n- Create a global interceptor to add a 'Via' header pointing to Tree-Gateway\n- Expose an Admin port\n- Manage API versions\n- Fix the log (winston is not logging on log file, but just on consoles)\n- Create a clsuter program, to initialize the app in cluster\n*/","\"use strict\";\nvar fs = require(\"fs-extra\");\nvar StringUtils = require(\"underscore.string\");\nvar proxy_1 = require(\"./proxy/proxy\");\nvar Utils = require(\"./proxy/utils\");\nvar throttling_1 = require(\"./throttling/throttling\");\nvar auth_1 = require(\"./authentication/auth\");\nvar es5_compat_1 = require(\"./es5-compat\");\nvar logger_1 = require(\"./logger\");\nvar dbConfig = require(\"./redis\");\nvar path = require(\"path\");\nvar defaults = require('defaults');\nvar Gateway = (function () {\n    function Gateway(app, gatewayConfig) {\n        this._config = defaults(gatewayConfig, {\n            rootPath: __dirname,\n            apiPath: path.join(__dirname + '/apis'),\n            middlewarePath: path.join(__dirname + '/middleware')\n        });\n        this.app = app;\n        this._logger = new logger_1.Logger(this.config.logger, this);\n        if (this.config.database) {\n            this._redisClient = dbConfig.initializeRedis(this.config.database);\n        }\n        this.apiProxy = new proxy_1.ApiProxy(this);\n        this.apiRateLimit = new throttling_1.ApiRateLimit(this);\n        this.apiAuth = new auth_1.ApiAuth(this);\n    }\n    Object.defineProperty(Gateway.prototype, \"server\", {\n        get: function () {\n            return this.app;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"logger\", {\n        get: function () {\n            return this._logger;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"config\", {\n        get: function () {\n            return this._config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"redisClient\", {\n        get: function () {\n            return this._redisClient;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"apiPath\", {\n        get: function () {\n            return this.config.apiPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"middlewarePath\", {\n        get: function () {\n            return this.config.middlewarePath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Gateway.prototype.initialize = function (ready) {\n        var _this = this;\n        this.apis = new es5_compat_1.StringMap();\n        var path = this.apiPath;\n        fs.readdir(path, function (err, files) {\n            if (err) {\n                _this._logger.error(\"Error reading directory: \" + err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/')) ? path : path + '/');\n                var length_1 = files.length;\n                files.forEach(function (fileName, index) {\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path + fileName, function (error, apiConfig) {\n                            if (error) {\n                                _this._logger.error(\"Error reading directory: \" + error);\n                            }\n                            else {\n                                _this.loadApi(apiConfig, (length_1 - 1 === index) ? ready : null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    };\n    Gateway.prototype.loadApi = function (api, ready) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        var apiKey = this.getApiKey(api);\n        this.apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        if (ready) {\n            ready();\n        }\n    };\n    Gateway.prototype.getApiKey = function (api) {\n        return api.name + (api.version ? '_' + api.version : '_default');\n    };\n    return Gateway;\n}());\nexports.Gateway = Gateway;\n"]}