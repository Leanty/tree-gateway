{"version":3,"sources":["../../src/lib/gateway.ts","gateway.js"],"names":["logger","require","compression","express","fs","admin_server_1","typescript_rest_1","StringUtils","api_1","gateway_1","proxy_1","Utils","throttling_1","auth_1","es5_compat_1","logger_1","dbConfig","path","defaults","Gateway","gatewayConfigFile","configFile","Object","defineProperty","prototype","get","app","enumerable","configurable","_logger","_config","_redisClient","config","apiPath","middlewarePath","_apis","values","start","ready","_this","initialize","err","apiServer","listen","listenPort","info","startAdmin","adminApp","adminServer","adminPort","console","error","stop","close","stopAdmin","loadApis","StringMap","readdir","files","endsWith","length_1","length","forEach","fileName","index","readJson","apiConfig","loadApi","api","validateApiConfig","value","message","JSON","stringify","loadValidateApi","isInfoEnabled","name","proxy","apiKey","getApiKey","set","normalizePath","throttling","isDebugEnabled","debug","apiRateLimit","authentication","apiAuth","apiProxy","configFileName","startsWith","join","process","cwd","gatewayConfig","validateGatewayConfig","initializeConfig","Logger","database","initializeRedis","ApiProxy","ApiRateLimit","ApiAuth","configureServer","configureAdminServer","rootPath","dirname","disable","use","underProxy","enable","APIService","gateway","Server","buildServices","version","exports"],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as http from \"http\";\nimport * as logger from \"morgan\";\nimport * as compression from \"compression\";\nimport * as express from \"express\";\nimport * as fs from \"fs-extra\";\nimport {APIService} from \"./admin/admin-server\";\nimport {Server} from \"typescript-rest\";\nimport * as StringUtils from \"underscore.string\";\nimport {ApiConfig, validateApiConfig} from \"./config/api\";\nimport {GatewayConfig, validateGatewayConfig} from \"./config/gateway\";\nimport {ApiProxy} from \"./proxy/proxy\";\nimport * as Utils from \"./proxy/utils\";\nimport {ApiRateLimit} from \"./throttling/throttling\";\nimport {ApiAuth} from \"./authentication/auth\";\nimport {Set, StringMap} from \"./es5-compat\";\nimport {Logger} from \"./logger\";\nimport * as redis from \"ioredis\";\nimport * as dbConfig from \"./redis\";\nimport * as path from \"path\";\n\nlet defaults = require('defaults');\n\nexport class Gateway {\n    private app: express.Application;\n    private adminApp: express.Application;\n    private apiProxy: ApiProxy;\n    private apiRateLimit: ApiRateLimit;\n    private apiAuth: ApiAuth;\n    private configFile: string;\n    private apiServer: http.Server;\n    private adminServer: http.Server;\n    private _apis: StringMap<ApiConfig>;\n    private _config: GatewayConfig;\n    private _logger: Logger;\n    private _redisClient: redis.Redis;\n\n    constructor(gatewayConfigFile: string) {\n        this.configFile = gatewayConfigFile;\n    }    \n    \n    get server(): express.Application {\n        return this.app;\n    }\n\n    get logger(): Logger {\n        return this._logger;\n    }\n\n    get config(): GatewayConfig {\n        return this._config;\n    }\n\n    get redisClient(): redis.Redis {\n        return this._redisClient;\n    }\n\n    get apiPath(): string {\n        return this.config.apiPath;\n    }\n\n    get middlewarePath(): string {\n        return this.config.middlewarePath;\n    }\n\n    get apis(): Array<ApiConfig> {\n        return this._apis.values();\n    }\n\n    start(ready?: (err?)=>void) {\n        this.initialize(this.configFile, (err)=>{\n            if (!err) {\n                this.apiServer = this.app.listen(this.config.listenPort, ()=>{\n                    this.logger.info('Gateway listenning on port %d', this.config.listenPort);\n                    if (ready) {\n                        ready();\n                    }\n                });\n            }\n        });  \n    }\n\n    startAdmin(ready?: ()=>void) {\n        if (this.adminApp) {\n            this.adminServer = this.adminApp.listen(this.config.adminPort, ()=>{\n                this.logger.info('Gateway Admin Server listenning on port %d', this.config.adminPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        }\n        else {\n            console.error(\"You must start the Tree-Gateway before.\");\n        }\n    }\n\n    stop() {\n        if (this.apiServer) {\n            this.apiServer.close();\n            this.apiServer = null;\n        }\n    }\n\n    stopAdmin() {\n        if (this.adminServer) {\n            this.adminServer.close();\n            this.adminServer = null;\n        }\n    }\n\n    private loadApis(ready?: (err?) => void) {\n        this._apis = new StringMap<ApiConfig>();\n        let path = this.apiPath;\n        fs.readdir(path, (err, files) => {\n            if (err) {\n                this._logger.error(\"Error reading directory: \"+err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/'))?path:path+'/');\n                const length = files.length;\n                files.forEach((fileName, index) =>{\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path+fileName, (error, apiConfig: ApiConfig)=>{\n                            if (error) {\n                                this._logger.error(\"Error reading directory: \"+error);\n                            }\n                            else {\n                                this.loadApi(apiConfig, (length -1 === index)?ready: null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    private loadApi(api: ApiConfig, ready?: (err?) => void) {\n        validateApiConfig(api, (err, value)=>{\n            if (err) {\n                this._logger.error('Error loading api config: %s\\n%s', err.message, JSON.stringify(value));\n                if (ready) {\n                    ready(err);\n                }\n            }\n            else {\n                this.loadValidateApi(api, ready);\n            }\n        });\n    }\n\n    private loadValidateApi(api: ApiConfig, ready?: (err?) => void) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        let apiKey: string = this.getApiKey(api);\n        this._apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        \n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        \n        if (ready) {\n            ready();\n        }\n    }\n\n    private initialize(configFileName: string, ready?: (err?)=>void) {\n        if (StringUtils.startsWith(configFileName, '.')) {\n            configFileName = path.join(process.cwd(), configFileName);                \n        }\n        \n        fs.readJson(configFileName, (error, gatewayConfig: GatewayConfig)=>{\n            if (error) {\n                console.error(\"Error reading tree-gateway.json config file: \"+error);\n            }\n            else {\n                this.app = express();\n                validateGatewayConfig(gatewayConfig, (err, value)=>{\n                    if (err) {\n                        console.error('Error loading api config: %s\\n%s', err.message, JSON.stringify(value));\n                        if (ready) {\n                            ready(err);\n                        }\n                    }\n                    else {\n                        this.initializeConfig(configFileName, gatewayConfig);\n                        this._logger = new Logger(this.config.logger, this);\n                        if (this.config.database) {\n                            this._redisClient = dbConfig.initializeRedis(this.config.database);\n                        }\n                        this.apiProxy = new ApiProxy(this);\n                        this.apiRateLimit = new ApiRateLimit(this);\n                        this.apiAuth = new ApiAuth(this);\n\n                        this.configureServer(ready);\n                        this.configureAdminServer();\n                    }\n                });\n            }\n        });\n    }\n\n    private initializeConfig(configFileName: string, gatewayConfig: GatewayConfig) {\n        this._config = defaults(gatewayConfig, {\n            rootPath : path.dirname(configFileName),\n        });\n        if (StringUtils.startsWith(this._config.rootPath, '.')) {\n            this._config.rootPath = path.join(path.dirname(configFileName), this._config.rootPath);\n        }\n\n        this._config = defaults(this._config, {\n            apiPath : path.join(this._config.rootPath, 'apis'),\n            middlewarePath : path.join(this._config.rootPath, 'middleware')\n        });\n\n        if (StringUtils.startsWith(this._config.apiPath, '.')) {\n            this._config.apiPath = path.join(this._config.rootPath, this._config.apiPath);                \n        }\n        if (StringUtils.startsWith(this._config.middlewarePath, '.')) {\n            this._config.middlewarePath = path.join(this._config.rootPath, this._config.middlewarePath);                \n        }\n    }\n\n    private configureServer(ready: (err?)=>void) {\n        this.app.disable('x-powered-by'); \n        this.app.use(compression());\n        if (this.config.underProxy) {\n            this.app.enable('trust proxy'); \n        }\n        if (this.app.get('env') == 'production') {\n            // const accessLogStream = fs.createWriteStream(path.join(Parameters.rootDir, 'logs/access_errors.log'),{flags: 'a'});\n            // gateway.server.use(logger('common', {\n            //   skip: function(req: express.Request, res: express.Response) { \n            //       return res.statusCode < 400 \n            //   }, \n            //   stream: accessLogStream }));\n        } \n        else {\n            this.app.use(logger('dev'));\n        }\n        this.loadApis(ready);\n    }\n\n    private configureAdminServer() {\n        this.adminApp = express();\n        this.adminApp.disable('x-powered-by'); \n        this.adminApp.use(compression());\n        this.adminApp.use(logger('dev'));\n        \n        APIService.gateway = this;\n        Server.buildServices(this.adminApp, APIService);\n    }\n\n    private getApiKey(api: ApiConfig) {\n        return api.name + (api.version? '_'+api.version: '_default');\n    }\n}\n/*TODO: \n  - Global interceptors / Filters / Throttling\n- Create a global interceptor to add a 'Via' header pointing to Tree-Gateway\n- Manage API versions\n- Create a clsuter program, to initialize the app in cluster\n*/","\"use strict\";\nvar logger = require(\"morgan\");\nvar compression = require(\"compression\");\nvar express = require(\"express\");\nvar fs = require(\"fs-extra\");\nvar admin_server_1 = require(\"./admin/admin-server\");\nvar typescript_rest_1 = require(\"typescript-rest\");\nvar StringUtils = require(\"underscore.string\");\nvar api_1 = require(\"./config/api\");\nvar gateway_1 = require(\"./config/gateway\");\nvar proxy_1 = require(\"./proxy/proxy\");\nvar Utils = require(\"./proxy/utils\");\nvar throttling_1 = require(\"./throttling/throttling\");\nvar auth_1 = require(\"./authentication/auth\");\nvar es5_compat_1 = require(\"./es5-compat\");\nvar logger_1 = require(\"./logger\");\nvar dbConfig = require(\"./redis\");\nvar path = require(\"path\");\nvar defaults = require('defaults');\nvar Gateway = (function () {\n    function Gateway(gatewayConfigFile) {\n        this.configFile = gatewayConfigFile;\n    }\n    Object.defineProperty(Gateway.prototype, \"server\", {\n        get: function () {\n            return this.app;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"logger\", {\n        get: function () {\n            return this._logger;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"config\", {\n        get: function () {\n            return this._config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"redisClient\", {\n        get: function () {\n            return this._redisClient;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"apiPath\", {\n        get: function () {\n            return this.config.apiPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"middlewarePath\", {\n        get: function () {\n            return this.config.middlewarePath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"apis\", {\n        get: function () {\n            return this._apis.values();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Gateway.prototype.start = function (ready) {\n        var _this = this;\n        this.initialize(this.configFile, function (err) {\n            if (!err) {\n                _this.apiServer = _this.app.listen(_this.config.listenPort, function () {\n                    _this.logger.info('Gateway listenning on port %d', _this.config.listenPort);\n                    if (ready) {\n                        ready();\n                    }\n                });\n            }\n        });\n    };\n    Gateway.prototype.startAdmin = function (ready) {\n        var _this = this;\n        if (this.adminApp) {\n            this.adminServer = this.adminApp.listen(this.config.adminPort, function () {\n                _this.logger.info('Gateway Admin Server listenning on port %d', _this.config.adminPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        }\n        else {\n            console.error(\"You must start the Tree-Gateway before.\");\n        }\n    };\n    Gateway.prototype.stop = function () {\n        if (this.apiServer) {\n            this.apiServer.close();\n            this.apiServer = null;\n        }\n    };\n    Gateway.prototype.stopAdmin = function () {\n        if (this.adminServer) {\n            this.adminServer.close();\n            this.adminServer = null;\n        }\n    };\n    Gateway.prototype.loadApis = function (ready) {\n        var _this = this;\n        this._apis = new es5_compat_1.StringMap();\n        var path = this.apiPath;\n        fs.readdir(path, function (err, files) {\n            if (err) {\n                _this._logger.error(\"Error reading directory: \" + err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/')) ? path : path + '/');\n                var length_1 = files.length;\n                files.forEach(function (fileName, index) {\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path + fileName, function (error, apiConfig) {\n                            if (error) {\n                                _this._logger.error(\"Error reading directory: \" + error);\n                            }\n                            else {\n                                _this.loadApi(apiConfig, (length_1 - 1 === index) ? ready : null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    };\n    Gateway.prototype.loadApi = function (api, ready) {\n        var _this = this;\n        api_1.validateApiConfig(api, function (err, value) {\n            if (err) {\n                _this._logger.error('Error loading api config: %s\\n%s', err.message, JSON.stringify(value));\n                if (ready) {\n                    ready(err);\n                }\n            }\n            else {\n                _this.loadValidateApi(api, ready);\n            }\n        });\n    };\n    Gateway.prototype.loadValidateApi = function (api, ready) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        var apiKey = this.getApiKey(api);\n        this._apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        if (ready) {\n            ready();\n        }\n    };\n    Gateway.prototype.initialize = function (configFileName, ready) {\n        var _this = this;\n        if (StringUtils.startsWith(configFileName, '.')) {\n            configFileName = path.join(process.cwd(), configFileName);\n        }\n        fs.readJson(configFileName, function (error, gatewayConfig) {\n            if (error) {\n                console.error(\"Error reading tree-gateway.json config file: \" + error);\n            }\n            else {\n                _this.app = express();\n                gateway_1.validateGatewayConfig(gatewayConfig, function (err, value) {\n                    if (err) {\n                        console.error('Error loading api config: %s\\n%s', err.message, JSON.stringify(value));\n                        if (ready) {\n                            ready(err);\n                        }\n                    }\n                    else {\n                        _this.initializeConfig(configFileName, gatewayConfig);\n                        _this._logger = new logger_1.Logger(_this.config.logger, _this);\n                        if (_this.config.database) {\n                            _this._redisClient = dbConfig.initializeRedis(_this.config.database);\n                        }\n                        _this.apiProxy = new proxy_1.ApiProxy(_this);\n                        _this.apiRateLimit = new throttling_1.ApiRateLimit(_this);\n                        _this.apiAuth = new auth_1.ApiAuth(_this);\n                        _this.configureServer(ready);\n                        _this.configureAdminServer();\n                    }\n                });\n            }\n        });\n    };\n    Gateway.prototype.initializeConfig = function (configFileName, gatewayConfig) {\n        this._config = defaults(gatewayConfig, {\n            rootPath: path.dirname(configFileName),\n        });\n        if (StringUtils.startsWith(this._config.rootPath, '.')) {\n            this._config.rootPath = path.join(path.dirname(configFileName), this._config.rootPath);\n        }\n        this._config = defaults(this._config, {\n            apiPath: path.join(this._config.rootPath, 'apis'),\n            middlewarePath: path.join(this._config.rootPath, 'middleware')\n        });\n        if (StringUtils.startsWith(this._config.apiPath, '.')) {\n            this._config.apiPath = path.join(this._config.rootPath, this._config.apiPath);\n        }\n        if (StringUtils.startsWith(this._config.middlewarePath, '.')) {\n            this._config.middlewarePath = path.join(this._config.rootPath, this._config.middlewarePath);\n        }\n    };\n    Gateway.prototype.configureServer = function (ready) {\n        this.app.disable('x-powered-by');\n        this.app.use(compression());\n        if (this.config.underProxy) {\n            this.app.enable('trust proxy');\n        }\n        if (this.app.get('env') == 'production') {\n        }\n        else {\n            this.app.use(logger('dev'));\n        }\n        this.loadApis(ready);\n    };\n    Gateway.prototype.configureAdminServer = function () {\n        this.adminApp = express();\n        this.adminApp.disable('x-powered-by');\n        this.adminApp.use(compression());\n        this.adminApp.use(logger('dev'));\n        admin_server_1.APIService.gateway = this;\n        typescript_rest_1.Server.buildServices(this.adminApp, admin_server_1.APIService);\n    };\n    Gateway.prototype.getApiKey = function (api) {\n        return api.name + (api.version ? '_' + api.version : '_default');\n    };\n    return Gateway;\n}());\nexports.Gateway = Gateway;\n"]}