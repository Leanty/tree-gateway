{"version":3,"sources":["../../src/lib/gateway.ts","gateway.js"],"names":["logger","require","compression","express","fs","StringUtils","proxy_1","Utils","throttling_1","auth_1","es5_compat_1","logger_1","dbConfig","path","defaults","Gateway","gatewayConfigFile","configFile","Object","defineProperty","prototype","get","app","enumerable","configurable","_logger","_config","_redisClient","config","apiPath","middlewarePath","start","ready","_this","initialize","apiServer","listen","listenPort","info","startAdmin","adminApp","adminServer","adminPort","console","error","stop","close","stopAdmin","loadApis","apis","StringMap","readdir","err","files","endsWith","length_1","length","forEach","fileName","index","readJson","apiConfig","loadApi","api","isInfoEnabled","name","proxy","apiKey","getApiKey","set","normalizePath","throttling","isDebugEnabled","debug","apiRateLimit","authentication","apiAuth","apiProxy","configFileName","startsWith","join","process","cwd","gatewayConfig","rootPath","dirname","Logger","database","initializeRedis","ApiProxy","ApiRateLimit","ApiAuth","configureServer","configureAdminServer","disable","use","underProxy","enable","version","exports"],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as http from \"http\";\nimport * as logger from \"morgan\";\nimport * as compression from \"compression\";\nimport * as express from \"express\";\nimport * as fs from \"fs-extra\";\nimport * as StringUtils from \"underscore.string\";\nimport {ApiConfig} from \"./config/api\";\nimport {GatewayConfig} from \"./config/gateway\";\nimport {ApiProxy} from \"./proxy/proxy\";\nimport * as Utils from \"./proxy/utils\";\nimport {ApiRateLimit} from \"./throttling/throttling\";\nimport {ApiAuth} from \"./authentication/auth\";\nimport {Set, StringMap} from \"./es5-compat\";\nimport {Logger} from \"./logger\";\nimport * as redis from \"ioredis\";\nimport * as dbConfig from \"./redis\";\nimport * as path from \"path\";\n\nlet defaults = require('defaults');\n\nexport class Gateway {\n    private app: express.Application;\n    private adminApp: express.Application;\n    private apiProxy: ApiProxy;\n    private apiRateLimit: ApiRateLimit;\n    private apiAuth: ApiAuth;\n    private apis: StringMap<ApiConfig>;\n    private _config: GatewayConfig;\n    private _logger: Logger;\n    private _redisClient: redis.Redis;\n    private configFile: string;\n    private apiServer: http.Server;\n    private adminServer: http.Server;\n\n    constructor(gatewayConfigFile: string) {\n        this.configFile = gatewayConfigFile;\n    }    \n    \n    get server(): express.Application {\n        return this.app;\n    }\n\n    get logger(): Logger {\n        return this._logger;\n    }\n\n    get config(): GatewayConfig {\n        return this._config;\n    }\n\n    get redisClient(): redis.Redis {\n        return this._redisClient;\n    }\n\n    get apiPath(): string {\n        return this.config.apiPath;\n    }\n\n    get middlewarePath(): string {\n        return this.config.middlewarePath;\n    }\n\n    start(ready?: ()=>void) {\n        this.initialize(this.configFile, ()=>{\n            this.apiServer = this.app.listen(this.config.listenPort, ()=>{\n                this.logger.info('Gateway listenning on port %d', this.config.listenPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        });  \n    }\n\n    startAdmin(ready?: ()=>void) {\n        if (this.adminApp) {\n            this.adminServer = this.adminApp.listen(this.config.adminPort, ()=>{\n                this.logger.info('Gateway Admin Server listenning on port %d', this.config.adminPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        }\n        else {\n            console.error(\"You must start the Tree-Gateway before.\");\n        }\n    }\n\n    stop() {\n        if (this.apiServer) {\n            this.apiServer.close();\n            this.apiServer = null;\n        }\n    }\n\n    stopAdmin() {\n        if (this.adminServer) {\n            this.adminServer.close();\n            this.adminServer = null;\n        }\n    }\n\n    private loadApis(ready?: () => void) {\n        this.apis = new StringMap<ApiConfig>();\n        let path = this.apiPath;\n        fs.readdir(path, (err, files) => {\n            if (err) {\n                this._logger.error(\"Error reading directory: \"+err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/'))?path:path+'/');\n                const length = files.length;\n                files.forEach((fileName, index) =>{\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path+fileName, (error, apiConfig: ApiConfig)=>{\n                            if (error) {\n                                this._logger.error(\"Error reading directory: \"+error);\n                            }\n                            else {\n                                this.loadApi(apiConfig, (length -1 === index)?ready: null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    private loadApi(api: ApiConfig, ready?: () => void) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        let apiKey: string = this.getApiKey(api);\n        this.apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        \n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        \n        if (ready) {\n            ready();\n        }\n    }\n\n    private initialize(configFileName: string, ready?: ()=>void) {\n        if (StringUtils.startsWith(configFileName, '.')) {\n            configFileName = path.join(process.cwd(), configFileName);                \n        }\n        \n        fs.readJson(configFileName, (error, gatewayConfig: GatewayConfig)=>{\n            if (error) {\n                console.error(\"Error reading tree-gateway.json config file: \"+error);\n            }\n            else {\n                this.app = express();\n                this._config = defaults(gatewayConfig, {\n                    rootPath : path.dirname(configFileName),\n                });\n                if (StringUtils.startsWith(this._config.rootPath, '.')) {\n                    this._config.rootPath = path.join(path.dirname(configFileName), this._config.rootPath);\n                }\n\n                this._config = defaults(this._config, {\n                    apiPath : path.join(this._config.rootPath, 'apis'),\n                    middlewarePath : path.join(this._config.rootPath, 'middleware')\n                });\n\n                if (StringUtils.startsWith(this._config.apiPath, '.')) {\n                    this._config.apiPath = path.join(this._config.rootPath, this._config.apiPath);                \n                }\n                if (StringUtils.startsWith(this._config.middlewarePath, '.')) {\n                    this._config.middlewarePath = path.join(this._config.rootPath, this._config.middlewarePath);                \n                }\n                this._logger = new Logger(this.config.logger, this);\n                if (this.config.database) {\n                    this._redisClient = dbConfig.initializeRedis(this.config.database);\n                }\n                this.apiProxy = new ApiProxy(this);\n                this.apiRateLimit = new ApiRateLimit(this);\n                this.apiAuth = new ApiAuth(this);\n\n                this.configureServer(ready);\n                this.configureAdminServer();\n            }\n        });\n    }\n\n    private configureServer(ready: ()=>void) {\n        this.app.disable('x-powered-by'); \n        this.app.use(compression());\n        if (this.config.underProxy) {\n            this.app.enable('trust proxy'); \n        }\n        if (this.app.get('env') == 'production') {\n            // const accessLogStream = fs.createWriteStream(path.join(Parameters.rootDir, 'logs/access_errors.log'),{flags: 'a'});\n            // gateway.server.use(logger('common', {\n            //   skip: function(req: express.Request, res: express.Response) { \n            //       return res.statusCode < 400 \n            //   }, \n            //   stream: accessLogStream }));\n        } \n        else {\n            this.app.use(logger('dev'));\n        }\n        this.loadApis(ready);\n    }\n\n    private configureAdminServer() {\n        this.adminApp = express();\n        this.adminApp.disable('x-powered-by'); \n        this.adminApp.use(compression());\n        this.adminApp.use(logger('dev'));\n\n        // Server.buildServices(adminServer, APIService);\n        // adminServer.listen(gateway.config.adminPort, ()=>{\n        //     // winston.info('Gateway Admin API listenning on port %d', Parameters.adminPort);\n        // });\n\n    }\n\n    private getApiKey(api: ApiConfig) {\n        return api.name + (api.version? '_'+api.version: '_default');\n    }\n}\n/*TODO: \n- Create a file for Gateway configurations:\n  - Global interceptors / Filters / Throttling\n- Create a global interceptor to add a 'Via' header pointing to Tree-Gateway\n- Expose an Admin port\n- Manage API versions\n- Fix the log (winston is not logging on log file, but just on consoles)\n- Create a clsuter program, to initialize the app in cluster\n*/","\"use strict\";\nvar logger = require(\"morgan\");\nvar compression = require(\"compression\");\nvar express = require(\"express\");\nvar fs = require(\"fs-extra\");\nvar StringUtils = require(\"underscore.string\");\nvar proxy_1 = require(\"./proxy/proxy\");\nvar Utils = require(\"./proxy/utils\");\nvar throttling_1 = require(\"./throttling/throttling\");\nvar auth_1 = require(\"./authentication/auth\");\nvar es5_compat_1 = require(\"./es5-compat\");\nvar logger_1 = require(\"./logger\");\nvar dbConfig = require(\"./redis\");\nvar path = require(\"path\");\nvar defaults = require('defaults');\nvar Gateway = (function () {\n    function Gateway(gatewayConfigFile) {\n        this.configFile = gatewayConfigFile;\n    }\n    Object.defineProperty(Gateway.prototype, \"server\", {\n        get: function () {\n            return this.app;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"logger\", {\n        get: function () {\n            return this._logger;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"config\", {\n        get: function () {\n            return this._config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"redisClient\", {\n        get: function () {\n            return this._redisClient;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"apiPath\", {\n        get: function () {\n            return this.config.apiPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"middlewarePath\", {\n        get: function () {\n            return this.config.middlewarePath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Gateway.prototype.start = function (ready) {\n        var _this = this;\n        this.initialize(this.configFile, function () {\n            _this.apiServer = _this.app.listen(_this.config.listenPort, function () {\n                _this.logger.info('Gateway listenning on port %d', _this.config.listenPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        });\n    };\n    Gateway.prototype.startAdmin = function (ready) {\n        var _this = this;\n        if (this.adminApp) {\n            this.adminServer = this.adminApp.listen(this.config.adminPort, function () {\n                _this.logger.info('Gateway Admin Server listenning on port %d', _this.config.adminPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        }\n        else {\n            console.error(\"You must start the Tree-Gateway before.\");\n        }\n    };\n    Gateway.prototype.stop = function () {\n        if (this.apiServer) {\n            this.apiServer.close();\n            this.apiServer = null;\n        }\n    };\n    Gateway.prototype.stopAdmin = function () {\n        if (this.adminServer) {\n            this.adminServer.close();\n            this.adminServer = null;\n        }\n    };\n    Gateway.prototype.loadApis = function (ready) {\n        var _this = this;\n        this.apis = new es5_compat_1.StringMap();\n        var path = this.apiPath;\n        fs.readdir(path, function (err, files) {\n            if (err) {\n                _this._logger.error(\"Error reading directory: \" + err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/')) ? path : path + '/');\n                var length_1 = files.length;\n                files.forEach(function (fileName, index) {\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path + fileName, function (error, apiConfig) {\n                            if (error) {\n                                _this._logger.error(\"Error reading directory: \" + error);\n                            }\n                            else {\n                                _this.loadApi(apiConfig, (length_1 - 1 === index) ? ready : null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    };\n    Gateway.prototype.loadApi = function (api, ready) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        var apiKey = this.getApiKey(api);\n        this.apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        if (ready) {\n            ready();\n        }\n    };\n    Gateway.prototype.initialize = function (configFileName, ready) {\n        var _this = this;\n        if (StringUtils.startsWith(configFileName, '.')) {\n            configFileName = path.join(process.cwd(), configFileName);\n        }\n        fs.readJson(configFileName, function (error, gatewayConfig) {\n            if (error) {\n                console.error(\"Error reading tree-gateway.json config file: \" + error);\n            }\n            else {\n                _this.app = express();\n                _this._config = defaults(gatewayConfig, {\n                    rootPath: path.dirname(configFileName),\n                });\n                if (StringUtils.startsWith(_this._config.rootPath, '.')) {\n                    _this._config.rootPath = path.join(path.dirname(configFileName), _this._config.rootPath);\n                }\n                _this._config = defaults(_this._config, {\n                    apiPath: path.join(_this._config.rootPath, 'apis'),\n                    middlewarePath: path.join(_this._config.rootPath, 'middleware')\n                });\n                if (StringUtils.startsWith(_this._config.apiPath, '.')) {\n                    _this._config.apiPath = path.join(_this._config.rootPath, _this._config.apiPath);\n                }\n                if (StringUtils.startsWith(_this._config.middlewarePath, '.')) {\n                    _this._config.middlewarePath = path.join(_this._config.rootPath, _this._config.middlewarePath);\n                }\n                _this._logger = new logger_1.Logger(_this.config.logger, _this);\n                if (_this.config.database) {\n                    _this._redisClient = dbConfig.initializeRedis(_this.config.database);\n                }\n                _this.apiProxy = new proxy_1.ApiProxy(_this);\n                _this.apiRateLimit = new throttling_1.ApiRateLimit(_this);\n                _this.apiAuth = new auth_1.ApiAuth(_this);\n                _this.configureServer(ready);\n                _this.configureAdminServer();\n            }\n        });\n    };\n    Gateway.prototype.configureServer = function (ready) {\n        this.app.disable('x-powered-by');\n        this.app.use(compression());\n        if (this.config.underProxy) {\n            this.app.enable('trust proxy');\n        }\n        if (this.app.get('env') == 'production') {\n        }\n        else {\n            this.app.use(logger('dev'));\n        }\n        this.loadApis(ready);\n    };\n    Gateway.prototype.configureAdminServer = function () {\n        this.adminApp = express();\n        this.adminApp.disable('x-powered-by');\n        this.adminApp.use(compression());\n        this.adminApp.use(logger('dev'));\n    };\n    Gateway.prototype.getApiKey = function (api) {\n        return api.name + (api.version ? '_' + api.version : '_default');\n    };\n    return Gateway;\n}());\nexports.Gateway = Gateway;\n"]}