{"version":3,"sources":["../../src/lib/gateway.ts","gateway.js"],"names":["logger","require","compression","express","fs","admin_server_1","typescript_rest_1","StringUtils","proxy_1","Utils","throttling_1","auth_1","es5_compat_1","logger_1","dbConfig","path","defaults","Gateway","gatewayConfigFile","configFile","Object","defineProperty","prototype","get","app","enumerable","configurable","_logger","_config","_redisClient","config","apiPath","middlewarePath","_apis","values","start","ready","_this","initialize","apiServer","listen","listenPort","info","startAdmin","adminApp","adminServer","adminPort","console","error","stop","close","stopAdmin","loadApis","StringMap","readdir","err","files","endsWith","length_1","length","forEach","fileName","index","readJson","apiConfig","loadApi","api","isInfoEnabled","name","proxy","apiKey","getApiKey","set","normalizePath","throttling","isDebugEnabled","debug","apiRateLimit","authentication","apiAuth","apiProxy","configFileName","startsWith","join","process","cwd","gatewayConfig","initializeConfig","Logger","database","initializeRedis","ApiProxy","ApiRateLimit","ApiAuth","configureServer","configureAdminServer","rootPath","dirname","disable","use","underProxy","enable","APIService","gateway","Server","buildServices","version","exports"],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as http from \"http\";\nimport * as logger from \"morgan\";\nimport * as compression from \"compression\";\nimport * as express from \"express\";\nimport * as fs from \"fs-extra\";\nimport {APIService} from \"./admin/admin-server\";\nimport {Server} from \"typescript-rest\";\nimport * as StringUtils from \"underscore.string\";\nimport {ApiConfig} from \"./config/api\";\nimport {GatewayConfig} from \"./config/gateway\";\nimport {ApiProxy} from \"./proxy/proxy\";\nimport * as Utils from \"./proxy/utils\";\nimport {ApiRateLimit} from \"./throttling/throttling\";\nimport {ApiAuth} from \"./authentication/auth\";\nimport {Set, StringMap} from \"./es5-compat\";\nimport {Logger} from \"./logger\";\nimport * as redis from \"ioredis\";\nimport * as dbConfig from \"./redis\";\nimport * as path from \"path\";\n\nlet defaults = require('defaults');\n\nexport class Gateway {\n    private app: express.Application;\n    private adminApp: express.Application;\n    private apiProxy: ApiProxy;\n    private apiRateLimit: ApiRateLimit;\n    private apiAuth: ApiAuth;\n    private configFile: string;\n    private apiServer: http.Server;\n    private adminServer: http.Server;\n    private _apis: StringMap<ApiConfig>;\n    private _config: GatewayConfig;\n    private _logger: Logger;\n    private _redisClient: redis.Redis;\n\n    constructor(gatewayConfigFile: string) {\n        this.configFile = gatewayConfigFile;\n    }    \n    \n    get server(): express.Application {\n        return this.app;\n    }\n\n    get logger(): Logger {\n        return this._logger;\n    }\n\n    get config(): GatewayConfig {\n        return this._config;\n    }\n\n    get redisClient(): redis.Redis {\n        return this._redisClient;\n    }\n\n    get apiPath(): string {\n        return this.config.apiPath;\n    }\n\n    get middlewarePath(): string {\n        return this.config.middlewarePath;\n    }\n\n    get apis(): Array<ApiConfig> {\n        return this._apis.values();\n    }\n\n    start(ready?: ()=>void) {\n        this.initialize(this.configFile, ()=>{\n            this.apiServer = this.app.listen(this.config.listenPort, ()=>{\n                this.logger.info('Gateway listenning on port %d', this.config.listenPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        });  \n    }\n\n    startAdmin(ready?: ()=>void) {\n        if (this.adminApp) {\n            this.adminServer = this.adminApp.listen(this.config.adminPort, ()=>{\n                this.logger.info('Gateway Admin Server listenning on port %d', this.config.adminPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        }\n        else {\n            console.error(\"You must start the Tree-Gateway before.\");\n        }\n    }\n\n    stop() {\n        if (this.apiServer) {\n            this.apiServer.close();\n            this.apiServer = null;\n        }\n    }\n\n    stopAdmin() {\n        if (this.adminServer) {\n            this.adminServer.close();\n            this.adminServer = null;\n        }\n    }\n\n    private loadApis(ready?: () => void) {\n        this._apis = new StringMap<ApiConfig>();\n        let path = this.apiPath;\n        fs.readdir(path, (err, files) => {\n            if (err) {\n                this._logger.error(\"Error reading directory: \"+err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/'))?path:path+'/');\n                const length = files.length;\n                files.forEach((fileName, index) =>{\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path+fileName, (error, apiConfig: ApiConfig)=>{\n                            if (error) {\n                                this._logger.error(\"Error reading directory: \"+error);\n                            }\n                            else {\n                                this.loadApi(apiConfig, (length -1 === index)?ready: null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    private loadApi(api: ApiConfig, ready?: () => void) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        let apiKey: string = this.getApiKey(api);\n        this._apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        \n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        \n        if (ready) {\n            ready();\n        }\n    }\n\n    private initialize(configFileName: string, ready?: ()=>void) {\n        if (StringUtils.startsWith(configFileName, '.')) {\n            configFileName = path.join(process.cwd(), configFileName);                \n        }\n        \n        fs.readJson(configFileName, (error, gatewayConfig: GatewayConfig)=>{\n            if (error) {\n                console.error(\"Error reading tree-gateway.json config file: \"+error);\n            }\n            else {\n                this.app = express();\n                this.initializeConfig(configFileName, gatewayConfig);\n                this._logger = new Logger(this.config.logger, this);\n                if (this.config.database) {\n                    this._redisClient = dbConfig.initializeRedis(this.config.database);\n                }\n                this.apiProxy = new ApiProxy(this);\n                this.apiRateLimit = new ApiRateLimit(this);\n                this.apiAuth = new ApiAuth(this);\n\n                this.configureServer(ready);\n                this.configureAdminServer();\n            }\n        });\n    }\n\n    private initializeConfig(configFileName: string, gatewayConfig: GatewayConfig) {\n        this._config = defaults(gatewayConfig, {\n            rootPath : path.dirname(configFileName),\n        });\n        if (StringUtils.startsWith(this._config.rootPath, '.')) {\n            this._config.rootPath = path.join(path.dirname(configFileName), this._config.rootPath);\n        }\n\n        this._config = defaults(this._config, {\n            apiPath : path.join(this._config.rootPath, 'apis'),\n            middlewarePath : path.join(this._config.rootPath, 'middleware')\n        });\n\n        if (StringUtils.startsWith(this._config.apiPath, '.')) {\n            this._config.apiPath = path.join(this._config.rootPath, this._config.apiPath);                \n        }\n        if (StringUtils.startsWith(this._config.middlewarePath, '.')) {\n            this._config.middlewarePath = path.join(this._config.rootPath, this._config.middlewarePath);                \n        }\n    }\n\n    private configureServer(ready: ()=>void) {\n        this.app.disable('x-powered-by'); \n        this.app.use(compression());\n        if (this.config.underProxy) {\n            this.app.enable('trust proxy'); \n        }\n        if (this.app.get('env') == 'production') {\n            // const accessLogStream = fs.createWriteStream(path.join(Parameters.rootDir, 'logs/access_errors.log'),{flags: 'a'});\n            // gateway.server.use(logger('common', {\n            //   skip: function(req: express.Request, res: express.Response) { \n            //       return res.statusCode < 400 \n            //   }, \n            //   stream: accessLogStream }));\n        } \n        else {\n            this.app.use(logger('dev'));\n        }\n        this.loadApis(ready);\n    }\n\n    private configureAdminServer() {\n        this.adminApp = express();\n        this.adminApp.disable('x-powered-by'); \n        this.adminApp.use(compression());\n        this.adminApp.use(logger('dev'));\n        \n        APIService.gateway = this;\n        Server.buildServices(this.adminApp, APIService);\n    }\n\n    private getApiKey(api: ApiConfig) {\n        return api.name + (api.version? '_'+api.version: '_default');\n    }\n}\n/*TODO: \n  - Global interceptors / Filters / Throttling\n- Create a global interceptor to add a 'Via' header pointing to Tree-Gateway\n- Manage API versions\n- Create a clsuter program, to initialize the app in cluster\n*/","\"use strict\";\nvar logger = require(\"morgan\");\nvar compression = require(\"compression\");\nvar express = require(\"express\");\nvar fs = require(\"fs-extra\");\nvar admin_server_1 = require(\"./admin/admin-server\");\nvar typescript_rest_1 = require(\"typescript-rest\");\nvar StringUtils = require(\"underscore.string\");\nvar proxy_1 = require(\"./proxy/proxy\");\nvar Utils = require(\"./proxy/utils\");\nvar throttling_1 = require(\"./throttling/throttling\");\nvar auth_1 = require(\"./authentication/auth\");\nvar es5_compat_1 = require(\"./es5-compat\");\nvar logger_1 = require(\"./logger\");\nvar dbConfig = require(\"./redis\");\nvar path = require(\"path\");\nvar defaults = require('defaults');\nvar Gateway = (function () {\n    function Gateway(gatewayConfigFile) {\n        this.configFile = gatewayConfigFile;\n    }\n    Object.defineProperty(Gateway.prototype, \"server\", {\n        get: function () {\n            return this.app;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"logger\", {\n        get: function () {\n            return this._logger;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"config\", {\n        get: function () {\n            return this._config;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"redisClient\", {\n        get: function () {\n            return this._redisClient;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"apiPath\", {\n        get: function () {\n            return this.config.apiPath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"middlewarePath\", {\n        get: function () {\n            return this.config.middlewarePath;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(Gateway.prototype, \"apis\", {\n        get: function () {\n            return this._apis.values();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Gateway.prototype.start = function (ready) {\n        var _this = this;\n        this.initialize(this.configFile, function () {\n            _this.apiServer = _this.app.listen(_this.config.listenPort, function () {\n                _this.logger.info('Gateway listenning on port %d', _this.config.listenPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        });\n    };\n    Gateway.prototype.startAdmin = function (ready) {\n        var _this = this;\n        if (this.adminApp) {\n            this.adminServer = this.adminApp.listen(this.config.adminPort, function () {\n                _this.logger.info('Gateway Admin Server listenning on port %d', _this.config.adminPort);\n                if (ready) {\n                    ready();\n                }\n            });\n        }\n        else {\n            console.error(\"You must start the Tree-Gateway before.\");\n        }\n    };\n    Gateway.prototype.stop = function () {\n        if (this.apiServer) {\n            this.apiServer.close();\n            this.apiServer = null;\n        }\n    };\n    Gateway.prototype.stopAdmin = function () {\n        if (this.adminServer) {\n            this.adminServer.close();\n            this.adminServer = null;\n        }\n    };\n    Gateway.prototype.loadApis = function (ready) {\n        var _this = this;\n        this._apis = new es5_compat_1.StringMap();\n        var path = this.apiPath;\n        fs.readdir(path, function (err, files) {\n            if (err) {\n                _this._logger.error(\"Error reading directory: \" + err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/')) ? path : path + '/');\n                var length_1 = files.length;\n                files.forEach(function (fileName, index) {\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path + fileName, function (error, apiConfig) {\n                            if (error) {\n                                _this._logger.error(\"Error reading directory: \" + error);\n                            }\n                            else {\n                                _this.loadApi(apiConfig, (length_1 - 1 === index) ? ready : null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    };\n    Gateway.prototype.loadApi = function (api, ready) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        var apiKey = this.getApiKey(api);\n        this._apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        if (ready) {\n            ready();\n        }\n    };\n    Gateway.prototype.initialize = function (configFileName, ready) {\n        var _this = this;\n        if (StringUtils.startsWith(configFileName, '.')) {\n            configFileName = path.join(process.cwd(), configFileName);\n        }\n        fs.readJson(configFileName, function (error, gatewayConfig) {\n            if (error) {\n                console.error(\"Error reading tree-gateway.json config file: \" + error);\n            }\n            else {\n                _this.app = express();\n                _this.initializeConfig(configFileName, gatewayConfig);\n                _this._logger = new logger_1.Logger(_this.config.logger, _this);\n                if (_this.config.database) {\n                    _this._redisClient = dbConfig.initializeRedis(_this.config.database);\n                }\n                _this.apiProxy = new proxy_1.ApiProxy(_this);\n                _this.apiRateLimit = new throttling_1.ApiRateLimit(_this);\n                _this.apiAuth = new auth_1.ApiAuth(_this);\n                _this.configureServer(ready);\n                _this.configureAdminServer();\n            }\n        });\n    };\n    Gateway.prototype.initializeConfig = function (configFileName, gatewayConfig) {\n        this._config = defaults(gatewayConfig, {\n            rootPath: path.dirname(configFileName),\n        });\n        if (StringUtils.startsWith(this._config.rootPath, '.')) {\n            this._config.rootPath = path.join(path.dirname(configFileName), this._config.rootPath);\n        }\n        this._config = defaults(this._config, {\n            apiPath: path.join(this._config.rootPath, 'apis'),\n            middlewarePath: path.join(this._config.rootPath, 'middleware')\n        });\n        if (StringUtils.startsWith(this._config.apiPath, '.')) {\n            this._config.apiPath = path.join(this._config.rootPath, this._config.apiPath);\n        }\n        if (StringUtils.startsWith(this._config.middlewarePath, '.')) {\n            this._config.middlewarePath = path.join(this._config.rootPath, this._config.middlewarePath);\n        }\n    };\n    Gateway.prototype.configureServer = function (ready) {\n        this.app.disable('x-powered-by');\n        this.app.use(compression());\n        if (this.config.underProxy) {\n            this.app.enable('trust proxy');\n        }\n        if (this.app.get('env') == 'production') {\n        }\n        else {\n            this.app.use(logger('dev'));\n        }\n        this.loadApis(ready);\n    };\n    Gateway.prototype.configureAdminServer = function () {\n        this.adminApp = express();\n        this.adminApp.disable('x-powered-by');\n        this.adminApp.use(compression());\n        this.adminApp.use(logger('dev'));\n        admin_server_1.APIService.gateway = this;\n        typescript_rest_1.Server.buildServices(this.adminApp, admin_server_1.APIService);\n    };\n    Gateway.prototype.getApiKey = function (api) {\n        return api.name + (api.version ? '_' + api.version : '_default');\n    };\n    return Gateway;\n}());\nexports.Gateway = Gateway;\n"]}