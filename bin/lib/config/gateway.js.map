{"version":3,"sources":["../../src/lib/config/gateway.ts"],"names":[],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as Joi from \"joi\";\n\n/**\n * The API config descriptor.\n */\nexport interface GatewayConfig {\n    /**\n     * The gateway port\n     */\n    listenPort: number;\n    /**\n     * The gateway admin server port\n     */\n    adminPort: number;\n    /**\n     * The root folder where the gateway will work.\n     */\n    rootPath?: string;\n    /**\n     * Folder where the gateway will search for installed APIs.\n     */\n    apiPath?: string;\n    /**\n     * Folder where the gateway will search for its middleware functions.\n     */\n    middlewarePath?: string;\n    /**\n     * If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc)\n     */\n    underProxy?: boolean;\n    /**\n     * Configurations for gateway logger.\n     */\n    logger?: LoggerConfig;\n    /**\n     * Configurations for gateway database (REDIS).\n     */\n    database?: RedisConfig;\n    /**\n     * Configurations for gateway logger.\n     */\n    accessLogger?: AccessLoggerConfig;\n}\n\nexport interface AccessLoggerConfig {\n    \n}\n\nexport interface RedisConfig {\n    host: string;\n    port: number;\n}\n\nexport interface LoggerConfig {\n    /**\n     * Level of messages that this logger should log.\n     */\n    level?: string;\n    console?: LogConsoleConfig;\n    file?: LogFileConfig;\n}\n\nexport interface LogConsoleConfig {\n    /**\n     * flag indicating if we should prepend output with timestamps (default true). \n     */\n    timestamp?: boolean;\n    /**\n     * Flag indicating whether to suppress output.\n     */\n    silent?: boolean; \n    /**\n     * Flag indicating if we should colorize output.\n     */\n    colorize?: boolean; \n    /**\n     * If true, messages will be logged as JSON (default true).\n     */\n    json?: boolean;\n    /**\n     * Flag indiciating if the output should be passed through JSON.stringify, \n     * resulting in single-line output. Most useful when used in conjunction with \n     * the json flag. (default false)\n     */\n    stringify?: boolean; \n    /**\n     * If true, additional JSON metadata objects that are added to logging string \n     * messages will be displayed as a JSON string representation.  \n     */\n    prettyPrint?: boolean;\n    /**\n     * Numeric indicating how many times to recurse while formatting the object with util.inspect \n     * (only used with prettyPrint: true) \n     * (default null, unlimited)\n     */\n    depth?: number; \n    /**\n     * Flag indicating if uncaught exception should be output as human readable, instead of a single line\n     */\n    humanReadableUnhandledException?: boolean; \n    /**\n     * Flag indicating if we should prepend output with level (default true).\n     */\n    showLevel?: boolean;\n    /**\n     * Array of strings containing the levels to log to stderr instead of stdout, for example \n     * ['error', 'debug', 'info']. (default ['error', 'debug'])\n     */\n    stderrLevels?: Array<string>;     \n}\n\nexport interface LogFileConfig {\n    /**\n     * The filename of the logfile to write output to.\n     */\n    filename?: string;\n    /**\n     * flag indicating if we should prepend output with timestamps (default true). \n     */\n    timestamp?: boolean;\n    /**\n     * Flag indicating whether to suppress output.\n     */\n    silent?: boolean; \n    /**\n     * Flag indicating if we should colorize output.\n     */\n    colorize?: boolean; \n    /**\n     * Max size in bytes of the logfile, if the size is exceeded then a new file is created, \n     * a counter will become a suffix of the log file. \n     */\n    maxsize?: number; \n    /**\n     * Limit the number of files created when the size of the logfile is exceeded.\n     */\n    maxFiles?: number;\n    /**\n     * If true, messages will be logged as JSON (default true).\n     */\n    json?: boolean;\n    /**\n     * String indicating the end-of-line characters to use (default to \\n).\n     */\n    eol?: string;\n    /**\n     * If true, additional JSON metadata objects that are added to logging string \n     * messages will be displayed as a JSON string representation.  \n     */\n    prettyPrint?: boolean;\n    /**\n     * Numeric indicating how many times to recurse while formatting the object with util.inspect \n     * (only used with prettyPrint: true) \n     * (default null, unlimited)\n     */\n    depth?: number; \n    /**\n     * If true, messages will be logged as JSON and formatted for logstash (default false).\n     */\n    logstash?: boolean;\n    /**\n     * Flag indicating if we should prepend output with level (default true).\n     */\n    showLevel?: boolean;\n    /**\n     * If true, log files will be rolled based on maxsize and maxfiles, but in ascending order. \n     * The filename will always have the most recent log lines. The larger the appended number, \n     * the older the log file. \n     * This option requires maxFiles to be set, or it will be ignored.\n     */\n    tailable?: boolean;\n    /**\n     * The number of stream creation retry attempts before entering a failed state. \n     * In a failed state the transport stays active but performs a NOOP on it's log function. \n     * (default 2)\n     */\n    maxRetries?: number;\n    /**\n     * If true, all log files but the current one will be zipped.\n     */\n    zippedArchive?: boolean;\n}\n\nexport enum LogLevel {\n    error, info, debug\n}\n\nlet LogConsoleConfigSchema = Joi.object().keys({\n    timestamp: Joi.boolean(),\n    silent: Joi.boolean(), \n    colorize: Joi.boolean(), \n    json: Joi.boolean(),\n    stringify: Joi.boolean(), \n    prettyPrint: Joi.boolean(),\n    depth: Joi.number().positive(), \n    humanReadableUnhandledException: Joi.boolean(), \n    showLevel: Joi.boolean(),\n    stderrLevels: Joi.array().items(Joi.string().allow('error', 'info', 'debug')) \n});\n\nlet LogFileConfigSchema = Joi.object().keys({\n    filename: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    timestamp: Joi.boolean(),\n    silent: Joi.boolean(), \n    colorize: Joi.boolean(), \n    maxsize: Joi.number().positive(), \n    maxFiles: Joi.number().positive(),\n    json: Joi.boolean(),\n    eol: Joi.string(),\n    prettyPrint: Joi.boolean(),\n    depth: Joi.number().positive(), \n    logstash: Joi.boolean(),\n    showLevel: Joi.boolean(),\n    tailable: Joi.boolean(),\n    maxRetries: Joi.number().positive(),\n    zippedArchive: Joi.boolean()    \n}).with('depth','prettyPrint').with('tailable', 'maxFiles');\n\nlet LoggerConfigSchema = Joi.object().keys({\n    level: Joi.string().allow('error', 'info', 'debug'),\n    console: LogConsoleConfigSchema,\n    file: LogFileConfigSchema\n});\n\nlet RedisConfigSchema = Joi.object().keys({\n    host: Joi.string().hostname().required(),\n    port: Joi.number().positive().required()\n});\n\nlet AccessLoggerConfigSchema = Joi.object().keys({\n});\n\nexport let GatewayConfigValidatorSchema = Joi.object().keys({\n    listenPort: Joi.number().positive().required(),\n    adminPort: Joi.number().positive().required(),\n    rootPath: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    apiPath: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    middlewarePath: Joi.string().regex(/^[a-z\\.\\/][a-zA-Z0-9\\.\\/]*$/),\n    underProxy: Joi.boolean(),\n    logger: LoggerConfigSchema,\n    database: RedisConfigSchema,\n    accessLogger: AccessLoggerConfigSchema\n});\n\nexport function validateGatewayConfig(gatewayConfig: GatewayConfig, callback: (err, value)=>void) {\n    Joi.validate(gatewayConfig, GatewayConfigValidatorSchema, callback);\n}"]}