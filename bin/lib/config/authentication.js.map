{"version":3,"sources":["../../src/lib/config/authentication.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC","file":"authentication.js","sourcesContent":["\"use strict\";\n\nexport interface AuthenticationConfig {\n    jwt?: JWTAuthentication;\n    basic?: BasicAuthentication;\n    local?: LocalAuthentication;\n}\n\nexport interface BasicAuthentication {\n    /**\n     * Is a function with the parameters verify(userid, password, done) {\n     *  - userid The username.\n     *  - password The password.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify: string;\n}\n\nexport interface LocalAuthentication {\n    /**\n     * Is a function with the parameters verify(userid, password, done) {\n     *  - userid The username.\n     *  - password The password.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify: string;\n    /**\n     * Optional, defaults to 'username'\n     */\n    usernameField?: string;\n    /**\n     * Optional, defaults to 'password'\n     */\n    passwordField?: string;\n}\n\nexport interface JWTAuthentication {\n    /**\n     * Is a REQUIRED string or buffer containing the secret (symmetric) \n     * or PEM-encoded public key (asymmetric) for verifying the token's signature.\n     */\n    secretOrKey:string;\n    /**\n     * Defines how the JWT token will be extracted from request.\n     */\n    extractFrom?: JWTRequestExtractor; \n    /**\n     * If defined the token issuer (iss) will be verified against this value.\n     */\n    issuer?: string;\n    /**\n     * If defined, the token audience (aud) will be verified against this value.\n     */\n    audience?: string;\n    /**\n     * List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\n     */\n    algorithms: Array<string>;\n    /**\n     * If true do not validate the expiration of the token.\n     */\n    ignoreExpiration?: boolean;\n    /**\n     * Is a function with the parameters verify(request, jwt_payload, done) \n     *  - request The user request.\n     *  - jwt_payload is an object literal containing the decoded JWT payload.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify?: string;\n}\n\nexport interface JWTRequestExtractor {\n    header?: string;\n    queryParam?: string;\n    authHeader?: string;\n    bodyField?: string;\n    cookie?: string;\n}"]}