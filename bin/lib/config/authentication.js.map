{"version":3,"sources":["../../src/lib/config/authentication.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,GAAG,WAAM,KAAK,CAAC,CAAA;AA+E3B,IAAI,yBAAyB,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IAC9C,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;IACpB,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE;IACxB,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE;IACxB,SAAS,EAAE,GAAG,CAAC,MAAM,EAAE;IACvB,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;CACvB,CAAC,CAAC;AAEH,IAAI,uBAAuB,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IAC5C,WAAW,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACpC,WAAW,EAAE,yBAAyB;IACtC,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;IACpB,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE;IACtB,UAAU,EAAE,GAAG,CAAC,KAAK,EAAE,CAAC,KAAK,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC;IAC3C,gBAAgB,EAAE,GAAG,CAAC,OAAO,EAAE;IAC/B,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE;CACvB,CAAC,CAAC;AAEH,IAAI,yBAAyB,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IAC9C,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CAClC,CAAC,CAAC;AAEH,IAAI,yBAAyB,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IAC9C,MAAM,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IAC/B,aAAa,EAAE,GAAG,CAAC,MAAM,EAAE;IAC3B,aAAa,EAAE,GAAG,CAAC,MAAM,EAAE;CAC9B,CAAC,CAAC;AAEQ,qCAA6B,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IACzD,GAAG,EAAE,uBAAuB;IAC5B,KAAK,EAAE,yBAAyB;IAChC,KAAK,EAAE,yBAAyB;CACnC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,OAAO,CAAC,CAAC;AAEhC,sCAA6C,cAAoC,EAAE,QAA4B;IAC3G,GAAG,CAAC,QAAQ,CAAC,cAAc,EAAE,qCAA6B,EAAE,QAAQ,CAAC,CAAC;AAC1E,CAAC;AAFe,oCAA4B,+BAE3C,CAAA","file":"authentication.js","sourcesContent":["\"use strict\";\n\nimport * as Joi from \"joi\";\n\nexport interface AuthenticationConfig {\n    jwt?: JWTAuthentication;\n    basic?: BasicAuthentication;\n    local?: LocalAuthentication;\n}\n\nexport interface BasicAuthentication {\n    /**\n     * Is a function with the parameters verify(userid, password, done) {\n     *  - userid The username.\n     *  - password The password.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify: string;\n}\n\nexport interface LocalAuthentication {\n    /**\n     * Is a function with the parameters verify(userid, password, done) {\n     *  - userid The username.\n     *  - password The password.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify: string;\n    /**\n     * Optional, defaults to 'username'\n     */\n    usernameField?: string;\n    /**\n     * Optional, defaults to 'password'\n     */\n    passwordField?: string;\n}\n\nexport interface JWTAuthentication {\n    /**\n     * Is a REQUIRED string or buffer containing the secret (symmetric) \n     * or PEM-encoded public key (asymmetric) for verifying the token's signature.\n     */\n    secretOrKey:string;\n    /**\n     * Defines how the JWT token will be extracted from request.\n     */\n    extractFrom?: JWTRequestExtractor; \n    /**\n     * If defined the token issuer (iss) will be verified against this value.\n     */\n    issuer?: string;\n    /**\n     * If defined, the token audience (aud) will be verified against this value.\n     */\n    audience?: string;\n    /**\n     * List of strings with the names of the allowed algorithms. For instance, [\"HS256\", \"HS384\"].\n     */\n    algorithms?: Array<string>;\n    /**\n     * If true do not validate the expiration of the token.\n     */\n    ignoreExpiration?: boolean;\n    /**\n     * Is a function with the parameters verify(request, jwt_payload, done) \n     *  - request The user request.\n     *  - jwt_payload is an object literal containing the decoded JWT payload.\n     *  - done is a passport error first callback accepting arguments done(error, user, info)\n     */    \n    verify?: string;\n}\n\nexport interface JWTRequestExtractor {\n    header?: string;\n    queryParam?: string;\n    authHeader?: string;\n    bodyField?: string;\n    cookie?: string;\n}\n\nlet JWTRequestExtractorSchema = Joi.object().keys({\n    header: Joi.string(),\n    queryParam: Joi.string(),\n    authHeader: Joi.string(),\n    bodyField: Joi.string(),\n    cookie: Joi.string()\n});\n\nlet JWTAuthenticationSchema = Joi.object().keys({\n    secretOrKey: Joi.string().required(),\n    extractFrom: JWTRequestExtractorSchema,\n    issuer: Joi.string(),\n    audience: Joi.string(),\n    algorithms: Joi.array().items(Joi.string()),\n    ignoreExpiration: Joi.boolean(),\n    verify: Joi.string()\n});\n\nlet BasicAuthenticationSchema = Joi.object().keys({\n    verify: Joi.string().required()\n});\n\nlet LocalAuthenticationSchema = Joi.object().keys({\n    verify: Joi.string().required(),\n    usernameField: Joi.string(),\n    passwordField: Joi.string()\n});\n\nexport let AuthenticationValidatorSchema = Joi.object().keys({\n    jwt: JWTAuthenticationSchema,\n    basic: BasicAuthenticationSchema,\n    local: LocalAuthenticationSchema,\n}).xor('jwt', 'basic', 'local');\n\nexport function validateAuthenticationConfig(authentication: AuthenticationConfig, callback: (err, value)=>void) {\n    Joi.validate(authentication, AuthenticationValidatorSchema, callback);\n}"]}