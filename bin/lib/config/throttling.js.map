{"version":3,"sources":["../../src/lib/config/throttling.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,GAAG,WAAM,KAAK,CAAC,CAAA;AA6EhB,uCAA+B,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,IAAI,CAAC;IAC3D,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE;IACtB,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE;IACxB,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE;IACrB,GAAG,EAAE,GAAG,CAAC,MAAM,EAAE;IACjB,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE;IACrB,UAAU,EAAE,GAAG,CAAC,MAAM,EAAE;IACxB,OAAO,EAAE,GAAG,CAAC,OAAO,EAAE;IACtB,YAAY,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;IACrC,OAAO,EAAE,GAAG,CAAC,MAAM,EAAE,CAAC,QAAQ,EAAE;CACnC,CAAC,CAAC;AAEH,kCAAyC,UAA4B,EAAE,QAA4B;IAC/F,GAAG,CAAC,QAAQ,CAAC,UAAU,EAAE,uCAA+B,EAAE,QAAQ,CAAC,CAAC;AACxE,CAAC;AAFe,gCAAwB,2BAEvC,CAAA","file":"throttling.js","sourcesContent":["\"use strict\";\n\nimport * as Joi from \"joi\";\n\nexport interface ThrottlingConfig {\n    /**\n     * milliseconds - how long to keep records of requests in memory. \n     * Defaults to 60000 (1 minute).  \n     */\n    windowMs?: number;\n    /**\n     * max number of connections during windowMs before starting to delay responses. \n     * Defaults to 1. Set to 0 to disable delaying.\n     */\n    delayAfter?: number;\n    /**\n     * milliseconds - how long to delay the response, multiplied by (number of recent hits - delayAfter). \n     * Defaults to 1000 (1 second). Set to 0 to disable delaying.\n     */\n    delayMs?: number;\n    /**\n     * max number of connections during windowMs milliseconds before sending a 429 response. \n     * Defaults to 5. Set to 0 to disable.\n     */\n    max?: number;\n    /**\n     * Error message returned when max is exceeded. \n     * Defaults to 'Too many requests, please try again later.'\n     */\n    message?: string;\n    /**\n     * HTTP status code returned when max is exceeded. \n     * Defaults to 429.\n     */\n    statusCode?: number;\n    /**\n     * Enable header to show request limit and current usage.\n     */\n    headers?: boolean;\n    /**\n     * The name of the function used to generate keys. By default user IP address (req.ip) is used.\n     * For Example, on myKeyGen.js file:\n     * ```\n     * module.exports = function (req) {\n     *    return req.ip;\n     * };\n     * ```\n     * This function must be saved on a js file:\n     * ``` \n     * middleware/throttling/keyGenerator/myKeyGen.js\n     * ```\n     */\n    keyGenerator?: string;\n    /**\n     * The name of the function to execute once the max limit is exceeded. It receives the request \n     * and the response objects. The \"next\" param is available if you need to pass to the \n     * next middleware.\n     * \n     * For Example, on myHandler.js file:\n     * ```\n     * module.exports = function (req, res) {\n     *   res.format({\n     *      html: function(){\n     *         res.status(options.statusCode).end(options.message);\n     *      },\n     *      json: function(){\n     *         res.status(options.statusCode).json({ message: options.message });\n     *      }\n     *   });\n     * };\n     * ```\n     * This function must be saved on a js file:\n     * ``` \n     * middleware/throttling/handler/myHandler.js\n     * ```\n     */\n    handler?: string;\n}\n\nexport let ThrottlingConfigValidatorSchema = Joi.object().keys({\n    windowMs: Joi.number(),\n    delayAfter: Joi.number(),\n    delayMs: Joi.number(),\n    max: Joi.number(),\n    message: Joi.string(),\n    statusCode: Joi.number(),\n    headers: Joi.boolean(), \n    keyGenerator: Joi.string().alphanum(),\n    handler: Joi.string().alphanum()\n});\n\nexport function validateThrottlingConfig(throttling: ThrottlingConfig, callback: (err, value)=>void) {\n    Joi.validate(throttling, ThrottlingConfigValidatorSchema, callback);\n}"]}