{"version":3,"sources":["../../src/lib/authentication/auth.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;;;;;;;;;;AAGb,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AACpC,+BAAgC,gBAAgB,CAAC,CAAA;AACjD,yBAAuB,aAAa,CAAC,CAAA;AACrC,IAAY,QAAQ,WAAM,MAAM,CAAC,CAAA;AACjC,IAAY,IAAI,WAAM,UAAU,CAAC,CAAA;AAEjC,IAAM,kBAAkB,GAAG;IACvB,KAAK,EAAE,OAAO,CAAC,kBAAkB,CAAC;IAClC,OAAO,EAAE,OAAO,CAAC,oBAAoB,CAAC;IACtC,OAAO,EAAE,OAAO,CAAC,oBAAoB,CAAC;CACzC,CAAA;AAGD;IAAA;IAyBA,CAAC;IArBG,gCAAc,GAAd,UAAe,MAAc,EAAE,IAAY,EAAE,cAAqC;QAAlF,iBAoBC;QAnBG,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC,OAAO,CAAC,UAAA,GAAG;YAClC,IAAI,CAAC;gBACD,IAAI,UAAU,GAAG,cAAc,CAAC,GAAG,CAAC,CAAC;gBACrC,EAAE,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,kBAAkB,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;oBACrC,IAAI,QAAQ,GAAG,kBAAkB,CAAC,GAAG,CAAC,CAAC;oBACvC,QAAQ,CAAC,MAAM,EAAE,UAAU,EAAE,KAAI,CAAC,QAAQ,CAAC,CAAC;gBAChD,CAAC;gBACD,IAAI,CAAC,CAAC;oBACF,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,gBAAgB,EAAE,YAAY,EAAG,GAAG,CAAC,CAAC;oBAC1F,IAAI,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;oBAC1B,QAAQ,CAAC,MAAM,EAAE,UAAU,CAAC,CAAC;gBACjC,CAAC;gBACD,KAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;gBAC3E,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,uDAAuD,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;YACnG,CACA;YAAA,KAAK,CAAA,CAAC,CAAC,CAAC,CAAC,CAAC;gBACN,KAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,8DAA8D,EAAE,GAAG,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC;YAC7G,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAvBD;QAAC,uBAAM;;6CAAA;IAFX;QAAC,0BAAS;;eAAA;IA0BV,cAAC;AAAD,CAzBA,AAyBC,IAAA;AAzBY,eAAO,UAyBnB,CAAA","file":"auth.js","sourcesContent":["\"use strict\";\n\nimport * as config from \"../config\";\nimport * as Utils from \"underscore\";\nimport {AutoWired, Inject} from \"typescript-ioc\";\nimport {Settings} from \"../settings\";\nimport * as pathUtil from \"path\"; \nimport * as auth from \"passport\"; \n\nconst providedStrategies = {\n    'jwt': require('./strategies/jwt'),\n    'basic': require('./strategies/basic'),\n    'local': require('./strategies/local')\n} \n\n@AutoWired\nexport class ApiAuth {\n    @Inject\n    private settings: Settings;\n\n    authentication(apiKey: string, path: string, authentication: config.Authentication) {\n        Utils.keys(authentication).forEach(key=>{\n            try {\n                let authConfig = authentication[key];\n                if (Utils.has(providedStrategies, key)) {\n                    let strategy = providedStrategies[key];\n                    strategy(apiKey, authConfig, this.settings);\n                }\n                else {\n                    let p = pathUtil.join(this.settings.middlewarePath, 'authentication', 'strategies' , key);                \n                    let strategy = require(p);\n                    strategy(apiKey, authConfig);\n                }\n                this.settings.app.use(path, auth.authenticate(apiKey, { session: false }));\n                this.settings.logger.debug(\"Authentication Strategy [%s] configured for path [%s]\", key, path);\n            }\n            catch(e) {\n                this.settings.logger.error(\"Error configuring Authentication Strategy [%s] for path [%s]\", key, path, e);\n            }\n        });\n    }\n}\n"]}