{"version":3,"sources":["../../src/lib/authentication/strategies/jwt.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,QAAQ,WAAM,UAAU,CAAC,CAAA;AACrC,6BAAmC,cAAc,CAAC,CAAA;AAGlD,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AACpC,IAAY,QAAQ,WAAM,MAAM,CAAC,CAAA;AAEjC,MAAM,CAAC,OAAO,GAAG,UAAU,MAAc,EAAE,UAA6B,EAAE,OAAgB;IACtF,IAAI,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,aAAa,EAAE,QAAQ,CAAC,CAAC;IAC3D,EAAE,CAAC,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,CAAC;QACzB,IAAI,UAAU,GAAkB,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;QACnE,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,IAAI,CAAC,CAAC,CAAA,CAAC;YACxB,IAAI,CAAC,gBAAgB,CAAC,GAAG,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,WAAW,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChG,CAAC;QACD,IAAI,CAAC,CAAC;YACF,IAAI,mBAAiB,GAAG,IAAI,KAAK,EAAO,CAAA;YACxC,KAAK,CAAC,IAAI,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC,OAAO,CAAC,UAAA,SAAS;gBAChD,mBAAiB,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,EAAE,UAAU,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YACvF,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,gBAAgB,CAAC,GAAG,yBAAU,CAAC,gBAAgB,CAAC,CAAC,mBAAiB,CAAC,CAAC;QAC7E,CAAC;IACL,CAAC;IACD,IAAI,CAAC,CAAC;QACF,IAAI,CAAC,gBAAgB,CAAC,GAAG,yBAAU,CAAC,cAAc,EAAE,CAAC;IACzD,CAAC;IACD,IAAI,cAAc,CAAC;IACnB,EAAE,CAAC,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;QACpB,IAAI,CAAC,mBAAmB,CAAC,GAAG,IAAI,CAAC;QACjC,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,gBAAgB,EAAE,QAAQ,EAAE,UAAU,CAAC,MAAM,CAAC,CAAC;QAC7F,cAAc,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;IAChC,CAAC;IACD,IAAI,CAAC,CAAC;QACF,cAAc,GAAG,UAAC,UAAU,EAAE,IAAI;YAC9B,IAAI,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;QAC3B,CAAC,CAAC;IACN,CAAC;IACD,QAAQ,CAAC,GAAG,CAAC,MAAM,EAAE,IAAI,uBAAQ,CAAC,IAAI,EAAE,cAAc,CAAC,CAAC,CAAC;AAC7D,CAAC,CAAC;AAEF,sBAAsB,SAAiB,EAAE,KAAa;IAClD,MAAM,CAAA,CAAC,SAAS,CAAC,CAAC,CAAC;QACf,KAAK,QAAQ,EAAE,MAAM,CAAC,yBAAU,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QACnD,KAAK,YAAY,EAAE,MAAM,CAAC,yBAAU,CAAC,qBAAqB,CAAC,KAAK,CAAC,CAAC;QAClE,KAAK,YAAY,EAAE,MAAM,CAAC,yBAAU,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC;QACrE,KAAK,WAAW,EAAE,MAAM,CAAC,yBAAU,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;QACzD,KAAK,QAAQ,EAAE,MAAM,CAAC,UAAC,GAAG;YACtB,IAAI,KAAK,GAAG,IAAI,CAAC;YACjB,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,OAAO,CAAC,CACvB,CAAC;gBACG,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YAC/B,CAAC;YACD,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC,CAAC;IACN,CAAC;IAED,MAAM,CAAC,yBAAU,CAAC,cAAc,EAAE,CAAC;AACvC,CAAC","file":"jwt.js","sourcesContent":["\"use strict\";\n\nimport * as passport from 'passport';\nimport {Strategy, ExtractJwt} from 'passport-jwt';\nimport {Gateway} from \"../../gateway\"; \nimport {JWTAuthentication} from \"../../config/authentication\";\nimport * as Utils from \"underscore\";\nimport * as pathUtil from \"path\"; \n\nmodule.exports = function (apiKey: string, authConfig: JWTAuthentication, gateway: Gateway) {\n    let opts = Utils.omit(authConfig, \"extractFrom\", \"verify\");\n    if (authConfig.extractFrom) {\n        let extractors: Array<string> = Utils.keys(authConfig.extractFrom);\n        if (extractors.length == 1){\n            opts['jwtFromRequest'] = getExtractor(extractors[0], authConfig.extractFrom[extractors[0]]);\n        }\n        else {\n            let requestExtractors = new Array<any>()\n            Utils.keys(authConfig.extractFrom).forEach(extractor=>{\n                requestExtractors.push(getExtractor(extractor, authConfig.extractFrom[extractor]));\n            });\n            opts['jwtFromRequest'] = ExtractJwt['fromExtractors'](requestExtractors);\n        }\n    }\n    else {\n        opts['jwtFromRequest'] = ExtractJwt.fromAuthHeader();\n    }\n    let verifyFunction;\n    if (authConfig.verify) {\n        opts['passReqToCallback'] = true;\n        let p = pathUtil.join(gateway.middlewarePath, 'authentication', 'verify', authConfig.verify);                \n        verifyFunction = require(p);\n    }\n    else {\n        verifyFunction = (jwtPayload, done) => {\n            done(null, jwtPayload);\n        };\n    }\n    passport.use(apiKey, new Strategy(opts, verifyFunction));\n};\n\nfunction getExtractor(extractor: string, param: string) {\n    switch(extractor) {\n        case 'header': return ExtractJwt.fromHeader(param);\n        case 'queryParam': return ExtractJwt.fromUrlQueryParameter(param);\n        case 'authHeader': return ExtractJwt.fromAuthHeaderWithScheme(param);\n        case 'bodyField': return ExtractJwt.fromBodyField(param);\n        case 'cookie': return (req)=>{\n            let token = null;\n            if (req && req.cookies)\n            {\n                token = req.cookies[param];\n            }\n            return token;\n        };            \n    }\n\n    return ExtractJwt.fromAuthHeader();\n}\n"]}