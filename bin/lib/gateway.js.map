{"version":3,"sources":["../../src/lib/gateway.ts"],"names":[],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as fs from \"fs-extra\";\nimport * as StringUtils from \"underscore.string\";\nimport * as config from \"./config\";\nimport {ApiProxy} from \"./proxy\";\nimport {ApiRateLimit} from \"./throttling\";\nimport {Set, StringMap} from \"./es5-compat\";\nimport {Settings} from \"./settings\";\nimport {AutoWired, Inject} from \"typescript-ioc\";\nimport * as winston from \"winston\";\n\n@AutoWired\nexport class Gateway {\n    @Inject\n    private settings: Settings;    \n    @Inject\n    private apiProxy: ApiProxy;\n    @Inject\n    private apiRateLimit: ApiRateLimit;\n    private apis: StringMap<config.Api>;\n    \n    get server() : express.Application{\n        return this.settings.app;\n    }\n\n    configure(path: string, ready?: () => void) {\n        this.apis = new StringMap<config.Api>();\n        fs.readdir(path, (err, files) => {\n            if (err) {\n                winston.error(\"Error reading directory: \"+err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/'))?path:path+'/');\n                const length = files.length;\n                files.forEach((fileName, index) =>{\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path+fileName, (error, apiConfig: config.Api)=>{\n                            if (error) {\n                                winston.error(\"Error reading directory: \"+error);\n                            }\n                            else {\n                                this.loadApi(apiConfig, (length -1 === index)?ready: null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    loadApi(api: config.Api, ready?: () => void) {\n        winston.info(\"Configuring API [\"+api.name+\"] on path: \"+api.proxy.path);\n        let apiKey: string = this.getApiKey(api);\n        this.apis.set(apiKey, api);\n        api.proxy.path = ((StringUtils.startsWith(api.proxy.path, '/'))?api.proxy.path:'/'+api.proxy.path);\n        \n        if (api.throttling) {\n            winston.debug(\"Configuring API Rate Limits\");\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        winston.debug(\"Configuring API Proxy\");\n        this.apiProxy.proxy(api);\n        \n        if (ready) {\n            ready();\n        }\n    }\n\n    private getApiKey(api: config.Api) {\n        return api.name + (api.version? '_'+api.version: '_default');\n    }\n}"]}