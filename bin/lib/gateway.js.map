{"version":3,"sources":["../../src/lib/gateway.ts"],"names":[],"mappings":"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","file":"gateway.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as fs from \"fs-extra\";\nimport * as StringUtils from \"underscore.string\";\nimport {ApiConfig} from \"./config/api\";\nimport {GatewayConfig} from \"./config/gateway\";\nimport {ApiProxy} from \"./proxy/proxy\";\nimport * as Utils from \"./proxy/utils\";\nimport {ApiRateLimit} from \"./throttling/throttling\";\nimport {ApiAuth} from \"./authentication/auth\";\nimport {Set, StringMap} from \"./es5-compat\";\nimport {Logger} from \"./logger\";\nimport * as redis from \"ioredis\";\nimport * as dbConfig from \"./redis\";\nimport * as path from \"path\";\n\nlet defaults = require('defaults');\n\nexport class Gateway {\n    private app: express.Application;\n    private apiProxy: ApiProxy;\n    private apiRateLimit: ApiRateLimit;\n    private apiAuth: ApiAuth;\n    private apis: StringMap<ApiConfig>;\n    private _config: GatewayConfig;\n    private _logger: Logger;\n    private _redisClient: redis.Redis;\n\n    constructor(app: express.Application, gatewayConfig?: GatewayConfig) {\n        this._config = defaults(gatewayConfig, {\n            rootPath : __dirname,\n            apiPath : path.join(__dirname +'/apis'),\n            middlewarePath : path.join(__dirname +'/middleware')\n        });\n        \n        this.app = app;\n        this._logger = new Logger(this.config.logger, this);\n        if (this.config.database) {\n            this._redisClient = dbConfig.initializeRedis(this.config.database);\n        }\n        this.apiProxy = new ApiProxy(this);\n        this.apiRateLimit = new ApiRateLimit(this);\n        this.apiAuth = new ApiAuth(this);\n    }    \n    \n    get server(): express.Application {\n        return this.app;\n    }\n\n    get logger(): Logger {\n        return this._logger;\n    }\n\n    get config(): GatewayConfig {\n        return this._config;\n    }\n\n    get redisClient(): redis.Redis {\n        return this._redisClient;\n    }\n\n    get apiPath(): string {\n        return this.config.apiPath;\n    }\n\n    get middlewarePath(): string {\n        return this.config.middlewarePath;\n    }\n\n    initialize(ready?: () => void) {\n        this.apis = new StringMap<ApiConfig>();\n        let path = this.apiPath;\n        fs.readdir(path, (err, files) => {\n            if (err) {\n                this._logger.error(\"Error reading directory: \"+err);\n            }\n            else {\n                path = ((StringUtils.endsWith(path, '/'))?path:path+'/');\n                const length = files.length;\n                files.forEach((fileName, index) =>{\n                    if (StringUtils.endsWith(fileName, '.json')) {\n                        fs.readJson(path+fileName, (error, apiConfig: ApiConfig)=>{\n                            if (error) {\n                                this._logger.error(\"Error reading directory: \"+error);\n                            }\n                            else {\n                                this.loadApi(apiConfig, (length -1 === index)?ready: null);\n                            }\n                        });\n                    }\n                });\n            }\n        });\n    }\n\n    loadApi(api: ApiConfig, ready?: () => void) {\n        if (this._logger.isInfoEnabled()) {\n            this._logger.info(\"Configuring API [%s] on path: %s\", api.name, api.proxy.path);\n        }\n        let apiKey: string = this.getApiKey(api);\n        this.apis.set(apiKey, api);\n        api.proxy.path = Utils.normalizePath(api.proxy.path);\n        \n        if (api.throttling) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Rate Limits\");\n            }\n            this.apiRateLimit.throttling(api.proxy.path, api.throttling);\n        }\n        if (api.authentication) {\n            if (this._logger.isDebugEnabled()) {\n                this._logger.debug(\"Configuring API Authentication\");\n            }\n            this.apiAuth.authentication(apiKey, api.proxy.path, api.authentication);\n        }\n        if (this._logger.isDebugEnabled()) {\n            this._logger.debug(\"Configuring API Proxy\");\n        }\n        this.apiProxy.proxy(api);\n        \n        if (ready) {\n            ready();\n        }\n    }\n\n    private getApiKey(api: ApiConfig) {\n        return api.name + (api.version? '_'+api.version: '_default');\n    }\n}\n/*TODO: \n- Create a file for Gateway configurations:\n  - Global interceptors / Filters / Throttling\n- Create a global interceptor to add a 'Via' header pointing to Tree-Gateway\n- Expose an Admin port\n- Manage API versions\n- Fix the log (winston is not logging on log file, but just on consoles)\n- Create a clsuter program, to initialize the app in cluster\n*/"]}