{"version":3,"sources":["../../src/lib/throttling/store.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAQnC;IAGE,oBAAY,OAAgB;QAC1B,IAAI,CAAC,OAAO,GAAG,QAAQ,CAAC,OAAO,EAAE;YAC7B,MAAM,EAAE,EAAE;YACV,MAAM,EAAE,KAAK;SAChB,CAAC,CAAC;IACL,CAAC;IAGD,yBAAI,GAAJ,UAAM,GAAW,EAAE,EAAE;QACnB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;QACvC,IAAI,GAAG,GAAY,IAAI,CAAC,OAAO,CAAC;QAChC,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE;aACf,IAAI,CAAC,MAAM,CAAC;aACZ,GAAG,CAAC,MAAM,CAAC;aACX,IAAI,CAAC,UAAS,GAAG,EAAE,OAAO;YACzB,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBACR,MAAM,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;YACjB,CAAC;YAGD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;gBAEhD,GAAG,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,CAAC,MAAM,CAAC,CAAC;YACxC,CAAC;YAED,EAAE,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAC1B,CAAC,CAAC,CAAC;IACP,CAAC;IAED,6BAAQ,GAAR,UAAS,GAAW;QAClB,IAAI,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,GAAG,CAAC;QAEvC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;IAClC,CAAC;IACH,iBAAC;AAAD,CArCA,AAqCC,IAAA;AArCY,kBAAU,aAqCtB,CAAA","file":"store.js","sourcesContent":["'use strict';\nimport * as redis from \"ioredis\";\nlet defaults = require('defaults');\n\ninterface Options {\n    expiry?: number;\n    prefix?: string;\n    client: redis.Redis;\n}\n\nexport class RedisStore {\n  options: Options;\n  \n  constructor(options: Options) {\n    this.options = defaults(options, {\n        expiry: 60, // default expiry is one minute\n        prefix: \"rl:\"\n    });\n  }\n\n\n  incr (key: string, cb) {\n    let rdskey = this.options.prefix + key;\n    let opt: Options = this.options;\n    opt.client.multi()\n      .incr(rdskey)\n      .ttl(rdskey)\n      .exec(function(err, replies) {\n        if (err) {\n          return cb(err);\n        }\n\n        // if this is new or has no expiry\n        if (replies[0][1] === 1 || replies[1][1] === -1) {\n          // then expire it after the timeout\n          opt.client.expire(rdskey, opt.expiry);\n        }\n\n        cb(null, replies[0][1]);\n      });\n  }\n\n  resetKey(key: string) {\n    let rdskey = this.options.prefix + key;\n\n    this.options.client.del(rdskey);\n  }\n}"]}