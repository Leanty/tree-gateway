{"version":3,"sources":["../../src/lib/throttling/throttling.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAIb,IAAY,KAAK,WAAM,YAAY,CAAC,CAAA;AACpC,IAAY,QAAQ,WAAM,MAAM,CAAC,CAAA;AAGjC;IAGI,sBAAY,OAAgB;QACxB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;IAC3B,CAAC;IAED,iCAAU,GAAV,UAAW,IAAY,EAAE,UAA4B;QACjD,IAAI,SAAS,GAAG,OAAO,CAAC,oBAAoB,CAAC,CAAC;QAC9C,IAAI,UAAU,GAAG,KAAK,CAAC,IAAI,CAAC,UAAU,EAAE,OAAO,EAAE,cAAc,EAAE,SAAS,CAAC,CAAC;QAE5E,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;YAC3B,IAAI,KAAK,GAAG,OAAO,CAAC,SAAS,CAAC,CAAC;YAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC;gBACvC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,kCAAkC,CAAC,CAAC;YAClE,CAAC;YACD,UAAU,CAAC,KAAK,GAAG,IAAI,KAAK,CAAC,UAAU,CAAC;gBACpC,MAAM,EAAE,CAAC,UAAU,CAAC,QAAQ,GAAG,IAAI,CAAC,GAAE,CAAC;gBACvC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,WAAW;aACnC,CAAC,CAAC;QACP,CAAC;QAED,IAAI,OAAO,GAAG,IAAI,SAAS,CAAC,UAAU,CAAC,CAAC;QAExC,EAAE,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;YAC1B,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,YAAY,EAAE,cAAc,EAAG,UAAU,CAAC,YAAY,CAAC,CAAC;YAC3G,UAAU,CAAC,YAAY,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACzC,CAAC;QACD,EAAE,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC,CAAC;YACrB,IAAI,CAAC,GAAG,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,EAAE,YAAY,EAAE,SAAS,EAAG,UAAU,CAAC,OAAO,CAAC,CAAC;YACjG,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QACpC,CAAC;QAED,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,GAAG,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC3C,CAAC;IACL,mBAAC;AAAD,CAnCA,AAmCC,IAAA;AAnCY,oBAAY,eAmCxB,CAAA","file":"throttling.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport {ThrottlingConfig} from \"../config/throttling\";\nimport * as Utils from \"underscore\";\nimport * as pathUtil from \"path\"; \nimport {Gateway} from \"../gateway\";\n\nexport class ApiRateLimit {\n    private gateway: Gateway;\n\n    constructor(gateway: Gateway) {\n        this.gateway = gateway;\n    }\n\n    throttling(path: string, throttling: ThrottlingConfig) {\n        let RateLimit = require('express-rate-limit');\n        let rateConfig = Utils.omit(throttling, \"store\", \"keyGenerator\", \"handler\");\n\n        if (this.gateway.redisClient) {\n            let store = require('./store');\n            if (this.gateway.logger.isDebugEnabled()) {\n                this.gateway.logger.debug(\"Using Redis as throttling store.\");\n            }\n            rateConfig.store = new store.RedisStore({\n                expiry: (throttling.windowMs / 1000) +1,\n                client: this.gateway.redisClient\n            });\n        }\n        \n        let limiter = new RateLimit(rateConfig);        \n\n        if (throttling.keyGenerator) {\n            let p = pathUtil.join(this.gateway.middlewarePath, 'throttling', 'keyGenerator' , throttling.keyGenerator);                \n            rateConfig.keyGenerator = require(p);\n        }\n        if (throttling.handler) {\n            let p = pathUtil.join(this.gateway.middlewarePath, 'throttling', 'handler' , throttling.handler);                \n            rateConfig.handler = require(p);\n        }\n\n        this.gateway.server.use(path, limiter);\n    }\n}\n"]}