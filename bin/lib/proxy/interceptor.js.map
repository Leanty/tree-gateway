{"version":3,"sources":["../../src/lib/proxy/interceptor.ts"],"names":[],"mappings":"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","file":"interceptor.js","sourcesContent":["\"use strict\";\n\nimport * as StringUtils from \"underscore.string\";\nimport * as config from \"../config\";\nimport {AutoWired, Inject} from \"typescript-ioc\";\nimport {Settings} from \"../settings\";\nimport * as path from \"path\"; \nimport * as Utils from \"./utils\";\n\nlet pathToRegexp = require('path-to-regexp');\n\n@AutoWired\nexport class ProxyInterceptor {\n    @Inject\n    private settings: Settings;\n    \n    requestInterceptor(proxy: config.Proxy) {\n        if (this.hasRequestInterceptor(proxy)) {\n          return (this.buildRequestInterceptor(proxy));\n        }\n        return null;\n    }\n\n    responseInterceptor(proxy: config.Proxy) {\n        if (this.hasResponseInterceptor(proxy)) {\n          return (this.buildResponseInterceptor(proxy));\n        }\n        return null;\n    }\n\n    private buildRequestInterceptor(proxy: config.Proxy) {\n        let func = new Array<string>();\n        func.push(\"function(proxyReq, originalReq){\");\n        proxy.interceptor.request.forEach((interceptor, index)=>{\n            let p = path.join(this.settings.middlewarePath, 'interceptor', 'request' ,interceptor.name);                \n            if (interceptor.appliesTo) {\n                func.push(\"if (\");                \n                interceptor.appliesTo.forEach((path,index)=>{\n                    if (index > 0) {\n                        func.push(\"||\");                \n                    }                \n                    func.push(\"(pathToRegexp('\"+Utils.normalizePath(path)+\"').test(originalReq.path))\");\n\n                });\n                func.push(\")\");                \n            }\n            func.push(\"proxyReq = require('\"+p+\"')(proxyReq, originalReq);\");\n        });\n        func.push(\"return proxyReq;\");\n        func.push(\"}\");\n        let f;\n        eval('f = '+func.join(''))\n        return f;\n    }\n\n    private buildResponseInterceptor(proxy: config.Proxy) {\n        let func = new Array<string>();\n        func.push(\"function(rsp, data, req, res, callback){\");\n        func.push(\"var continueChain = function(rsp, data, req, res, calback){ callback(null, data);};\");\n        proxy.interceptor.response.forEach((interceptor, index)=>{\n            if (interceptor.appliesTo) {\n                func.push(\"var f\"+index+\";\");        \n                func.push(\"if (\");                \n                interceptor.appliesTo.forEach((path,index)=>{\n                    if (index > 0) {\n                        func.push(\"&&\");                \n                    }                \n                    func.push(\"!(pathToRegexp('\"+Utils.normalizePath(path)+\"').test(req.path))\");\n\n                });\n                func.push(\")\");                \n                func.push(\"f\"+index+\" = continueChain;\");        \n                func.push(\"else f\"+index+\" = \");        \n            }\n            else {\n                func.push(\"var f\"+index+\" = \");        \n            }\n            let p = path.join(this.settings.middlewarePath, 'interceptor', 'response' ,interceptor.name);                \n            func.push(\"require('\"+p+\"');\");\n            func.push(\"f\"+index+\"(rsp, data, req, res, (error, value)=>{ \\\n                if (error) { \\\n                   callback(error); \\\n                   return; \\\n                } \\\n                data = value;\"\n            );\n        });\n        proxy.interceptor.response.forEach((interceptor, index)=>{\n            if (index == 0) {\n                func.push(\"callback(null, data);\");\n            }\n            func.push(\"});\");\n        });\n        func.push(\"}\");\n        let f;\n        eval('f = '+func.join(''));\n        return f;\n    }\n\n    private hasRequestInterceptor(proxy: config.Proxy) {\n        return (proxy.interceptor && proxy.interceptor.request && proxy.interceptor.request.length > 0);\n    }\n\n    private hasResponseInterceptor(proxy: config.Proxy) {\n        return (proxy.interceptor && proxy.interceptor.response && proxy.interceptor.response.length > 0);\n    }\n}  "]}