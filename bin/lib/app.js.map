{"version":3,"sources":["../../src/lib/app.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,wBAAsB,WAAW,CAAC,CAAA;AAClC,IAAY,EAAE,WAAM,UAAU,CAAC,CAAA;AAC/B,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,+BAAwB,gBAAgB,CAAC,CAAA;AACzC,IAAY,WAAW,WAAM,aAAa,CAAC,CAAA;AAC3C,6BAAyB,gBAAgB,CAAC,CAAA;AAC1C,6BAAyB,sBAAsB,CAAC,CAAA;AAChD,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,gCAAqB,iBAAiB,CAAC,CAAA;AAEvC,IAAI,OAAO,GAAY,0BAAS,CAAC,GAAG,CAAC,iBAAO,CAAC,CAAC;AAC9C,IAAI,GAAG,GAAG,sBAAsB,EAAE,CAAC;AACnC,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC;AAErB,oBAAoB,EAAE,CAAC;AAEvB;IACE,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;IACzB,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IAC5B,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAIvB,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;QACnC,IAAM,eAAe,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,yBAAU,CAAC,OAAO,EAAE,wBAAwB,CAAC,EAAC,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;QACnH,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE;YACvB,IAAI,EAAE,UAAS,GAAoB,EAAE,GAAqB;gBACtD,MAAM,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAA;YAC/B,CAAC;YACD,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC;IACD,IAAI,CAAC,CAAC;QACJ,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IACzB,CAAC;IACD,OAAO,CAAC,UAAU,EAAE,CAAC;IACrB,GAAG,CAAC,MAAM,CAAC,yBAAU,CAAC,IAAI,EAAE;QAC1B,OAAO,CAAC,IAAI,CAAC,+BAA+B,EAAE,yBAAU,CAAC,IAAI,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,GAAG,CAAC;AACb,CAAC;AAED;IACE,IAAI,WAAW,GAAG,OAAO,EAAE,CAAC;IAC5B,WAAW,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;IACpC,WAAW,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;IAC/B,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;IAE/B,wBAAM,CAAC,aAAa,CAAC,WAAW,EAAE,yBAAU,CAAC,CAAC;IAC9C,WAAW,CAAC,MAAM,CAAC,yBAAU,CAAC,SAAS,EAAE;QACvC,OAAO,CAAC,IAAI,CAAC,yCAAyC,EAAE,yBAAU,CAAC,SAAS,CAAC,CAAC;IAChF,CAAC,CAAC,CAAC;IACH,MAAM,CAAC,WAAW,CAAC;AACrB,CAAC","file":"app.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport {Gateway} from \"./gateway\";\nimport * as fs from \"fs-extra\";\nimport * as winston from \"winston\";\nimport {Container} from \"typescript-ioc\";\nimport * as compression from \"compression\";\nimport {Parameters} from \"./command-line\";\nimport {APIService} from \"./admin/admin-server\";\nimport * as path from \"path\";\nimport {Server} from \"typescript-rest\";\n\nlet gateway: Gateway = Container.get(Gateway);\nlet app = configureGatewayServer();\nmodule.exports = app;\n\nconfigureAdminServer();\n\nfunction configureGatewayServer() {\n  let app = gateway.server;\n  app.disable('x-powered-by'); \n  app.use(compression());\n  //app.enable('trust proxy'); // If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n\n\n  if (app.get('env') == 'production') {\n    const accessLogStream = fs.createWriteStream(path.join(Parameters.rootDir, 'logs/access_errors.log'),{flags: 'a'});\n    app.use(logger('common', {\n      skip: function(req: express.Request, res: express.Response) { \n          return res.statusCode < 400 \n      }, \n      stream: accessLogStream }));\n  } \n  else {\n    app.use(logger('dev'));\n  }\n  gateway.initialize();\n  app.listen(Parameters.port, ()=>{\n    winston.info('Gateway listenning on port %d', Parameters.port);\n  });\n\n  return app;\n}\n\nfunction configureAdminServer() {\n  let adminServer = express();\n  adminServer.disable('x-powered-by'); \n  adminServer.use(compression());\n  adminServer.use(logger('dev'));\n\n  Server.buildServices(adminServer, APIService);\n  adminServer.listen(Parameters.adminPort, ()=>{\n    winston.info('Gateway Admin API listenning on port %d', Parameters.adminPort);\n  });\n  return adminServer;\n}\n\n"]}