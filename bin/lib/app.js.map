{"version":3,"sources":["../../src/lib/app.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAGb,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,wBAAsB,WAAW,CAAC,CAAA;AAClC,IAAY,EAAE,WAAM,UAAU,CAAC,CAAA;AAC/B,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,+BAAwB,gBAAgB,CAAC,CAAA;AAEzC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,SAAS,GAAG,mBAAmB,EAAE,CAAC,CAAC;AACpF,IAAI,OAAO,GAAY,0BAAS,CAAC,GAAG,CAAC,iBAAO,CAAC,CAAC;AAC9C,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;AAIzB,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;IACnC,IAAM,eAAe,GAAG,EAAE,CAAC,iBAAiB,CAAC,SAAS,GAAG,yBAAyB,EAAC,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;IACjG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE;QACvB,IAAI,EAAE,UAAS,GAAoB,EAAE,GAAqB;YACtD,MAAM,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAA;QAC/B,CAAC;QACD,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;AAChC,CAAC;AACD,IAAI,CAAC,CAAC;IACJ,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACzB,CAAC;AAED,OAAO,CAAC,UAAU,EAAE,CAAC;AACrB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACjB,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"app.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport {Gateway} from \"./gateway\";\nimport * as fs from \"fs-extra\";\nimport * as winston from \"winston\";\nimport {Container} from \"typescript-ioc\";\n\nwinston.add(winston.transports.File, { filename: __dirname + '/logs/gateway.log' });\nlet gateway: Gateway = Container.get(Gateway);\nlet app = gateway.server;\n\n//app.enable('trust proxy'); // If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n\nif (app.get('env') == 'production') {\n  const accessLogStream = fs.createWriteStream(__dirname + '/logs/access_errors.log',{flags: 'a'});\n  app.use(logger('common', {\n    skip: function(req: express.Request, res: express.Response) { \n        return res.statusCode < 400 \n    }, \n    stream: accessLogStream }));\n} \nelse {\n  app.use(logger('dev'));\n}\n\ngateway.initialize();\napp.listen(3010);\nmodule.exports = app;\n\n"]}