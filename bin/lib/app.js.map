{"version":3,"sources":["../../src/lib/app.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,MAAM,WAAM,QAAQ,CAAC,CAAA;AACjC,wBAAsB,WAAW,CAAC,CAAA;AAClC,IAAY,EAAE,WAAM,UAAU,CAAC,CAAA;AAC/B,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,+BAAkC,gBAAgB,CAAC,CAAA;AACnD,IAAY,WAAW,WAAM,aAAa,CAAC,CAAA;AAC3C,yBAAuB,iBAAiB,CAAC,CAAA;AACzC,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,WAAW,WAAM,mBAAmB,CAAC,CAAA;AAEjD,IAAI,OAAO,GAAG,SAAS,CAAC;AAExB,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;IAC5B,OAAO,GAAG,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAC1B,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;QACzC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,OAAO,CAAC,CAAC;IAC9C,CAAC;IACD,IAAM,QAAQ,GAAa;QACzB,GAAG,EAAE;YACH,IAAM,QAAQ,GAAa,IAAI,mBAAQ,EAAE,CAAC;YAC1C,QAAQ,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;YACzB,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;YAC9C,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;YACzD,MAAM,CAAC,QAAQ,CAAC;QACpB,CAAC;KACF,CAAC;IAEF,0BAAS,CAAC,IAAI,CAAC,mBAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAA;AAC7C,CAAC;AACD,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,kBAAkB,CAAC,EAAE,CAAC,CAAC;AAC3F,IAAI,OAAO,GAAY,0BAAS,CAAC,GAAG,CAAC,iBAAO,CAAC,CAAC;AAC9C,IAAI,GAAG,GAAG,OAAO,CAAC,MAAM,CAAC;AACzB,GAAG,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;AAC5B,GAAG,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC;AAIvB,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC;IACnC,IAAM,eAAe,GAAG,EAAE,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE,wBAAwB,CAAC,EAAC,EAAC,KAAK,EAAE,GAAG,EAAC,CAAC,CAAC;IACxG,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,QAAQ,EAAE;QACvB,IAAI,EAAE,UAAS,GAAoB,EAAE,GAAqB;YACtD,MAAM,CAAC,GAAG,CAAC,UAAU,GAAG,GAAG,CAAA;QAC/B,CAAC;QACD,MAAM,EAAE,eAAe,EAAE,CAAC,CAAC,CAAC;AAChC,CAAC;AACD,IAAI,CAAC,CAAC;IACJ,GAAG,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;AACzB,CAAC;AAED,OAAO,CAAC,UAAU,EAAE,CAAC;AACrB,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AACjB,MAAM,CAAC,OAAO,GAAG,GAAG,CAAC","file":"app.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as logger from \"morgan\";\nimport {Gateway} from \"./gateway\";\nimport * as fs from \"fs-extra\";\nimport * as winston from \"winston\";\nimport {Container, Provider} from \"typescript-ioc\";\nimport * as compression from \"compression\";\nimport {Settings} from \"../lib/settings\";\nimport * as path from \"path\";\nimport * as StringUtils from \"underscore.string\";\n\nlet rootDir = __dirname;\n\nif (process.argv.length > 2) {\n  rootDir = process.argv[2];\n  if (StringUtils.startsWith(rootDir, '.')) {\n    rootDir = path.join(process.cwd(), rootDir);                \n  }\n  const provider: Provider = { \n    get: () => {\n      const settings: Settings = new Settings();\n      settings.app = express();\n      settings.apiPath = path.join(rootDir, 'apis');\n      settings.middlewarePath = path.join(rootDir ,'middleware');\n        return settings; \n    }\n  };\n\n  Container.bind(Settings).provider(provider)\n}\nwinston.add(winston.transports.File, { filename: path.join(rootDir, 'logs/gateway.log') });\nlet gateway: Gateway = Container.get(Gateway);\nlet app = gateway.server;\napp.disable('x-powered-by'); \napp.use(compression());\n//app.enable('trust proxy'); // If we are behind a reverse proxy (Heroku, Bluemix, AWS if you use an ELB, custom Nginx setup, etc) \n\n\nif (app.get('env') == 'production') {\n  const accessLogStream = fs.createWriteStream(path.join(rootDir, 'logs/access_errors.log'),{flags: 'a'});\n  app.use(logger('common', {\n    skip: function(req: express.Request, res: express.Response) { \n        return res.statusCode < 400 \n    }, \n    stream: accessLogStream }));\n} \nelse {\n  app.use(logger('dev'));\n}\n\ngateway.initialize();\napp.listen(3010);\nmodule.exports = app;\n\n"]}