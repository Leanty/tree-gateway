{"version":3,"sources":["../../src/lib/command-line.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,yBAAuB,iBAAiB,CAAC,CAAA;AACzC,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAC7B,IAAY,WAAW,WAAM,mBAAmB,CAAC,CAAA;AACjD,+BAAkC,gBAAgB,CAAC,CAAA;AAEnD,IAAI,IAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC;AAE3B,IAAI,UAAU,GAAG,IAAI;KAClB,MAAM,CAAC,KAAK,EAAE,2DAA2D,EAAE,SAAS,CAAC;KACrF,MAAM,CAAC,MAAM,EAAE,0BAA0B,EAAE,IAAI,CAAC;KAChD,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;AAEvB;IAAA;IAGA,CAAC;IAAD,iBAAC;AAAD,CAHA,AAGC,IAAA;AAHY,kBAAU,aAGtB,CAAA;AAED,UAAU,CAAC,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC;AACpC,UAAU,CAAC,IAAI,GAAG,UAAU,CAAC,IAAI,CAAC;AAElC,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,OAAO,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;IACpD,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;AACpE,CAAC;AACD,IAAM,QAAQ,GAAa;IACzB,GAAG,EAAE;QACH,IAAM,QAAQ,GAAa,IAAI,mBAAQ,EAAE,CAAC;QAC1C,QAAQ,CAAC,GAAG,GAAG,OAAO,EAAE,CAAC;QACzB,QAAQ,CAAC,OAAO,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;QACzD,QAAQ,CAAC,cAAc,GAAG,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;QACpE,MAAM,CAAC,QAAQ,CAAC;IACpB,CAAC;CACF,CAAC;AAEF,0BAAS,CAAC,IAAI,CAAC,mBAAQ,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAC5C,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,EAAE,EAAE,QAAQ,EAAE,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,kBAAkB,CAAC,EAAE,CAAC,CAAC","file":"command-line.js","sourcesContent":["\"use strict\";\n\nimport * as express from \"express\";\nimport * as winston from \"winston\";\nimport {Settings} from \"../lib/settings\";\nimport * as path from \"path\";\nimport * as StringUtils from \"underscore.string\";\nimport {Container, Provider} from \"typescript-ioc\";\n\nlet args = require(\"args\");\n\nlet parameters = args\n  .option('dir', 'The root directory where apis and middlewares are placed.', __dirname)\n  .option('port', 'The gateway listen port.', 8000)\n  .parse(process.argv);\n\nexport class Parameters {\n    static rootDir: string;\n    static port: number;\n}\n\nParameters.rootDir = parameters.dir;\nParameters.port = parameters.port;\n\nif (StringUtils.startsWith(Parameters.rootDir, '.')) {\n  Parameters.rootDir = path.join(process.cwd(), Parameters.rootDir);                \n}\nconst provider: Provider = { \n  get: () => {\n    const settings: Settings = new Settings();\n    settings.app = express();\n    settings.apiPath = path.join(Parameters.rootDir, 'apis');\n    settings.middlewarePath = path.join(Parameters.rootDir ,'middleware');\n      return settings; \n  }\n};\n\nContainer.bind(Settings).provider(provider);\nwinston.add(winston.transports.File, { filename: path.join(Parameters.rootDir, 'logs/gateway.log') });\n"]}