{"version":3,"sources":["../../src/lib/logger.ts"],"names":[],"mappings":"AAAA,YAAY,CAAC;AAEb,IAAY,OAAO,WAAM,SAAS,CAAC,CAAA;AACnC,wBAAqC,kBAAkB,CAAC,CAAA;AACxD,IAAY,WAAW,WAAM,mBAAmB,CAAC,CAAA;AACjD,IAAY,IAAI,WAAM,MAAM,CAAC,CAAA;AAG7B,IAAI,QAAQ,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAEnC;IAKI,gBAAY,MAAoB,EAAE,OAAgB;QAC9C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,OAAO,CAAC,CAAC;IAC3D,CAAC;IAEO,kCAAiB,GAAzB,UAA0B,MAAoB,EAAE,OAAgB;QAC5D,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,GAAE,kBAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,GAAG,kBAAQ,CAAC,IAAI,CAAC,CAAC;QAC9D,IAAM,OAAO,GAA0B;YACpC,KAAK,EAAE,kBAAQ,CAAC,IAAI,CAAC,KAAK,CAAC;YAC3B,UAAU,EAAE,EAAE;SAChB,CAAA;QAED,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;YAC3B,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;QAC5E,CAAC;QACD,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;YACxB,MAAM,CAAC,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,IAAI,EAAE;gBAChC,QAAQ,EAAE,oBAAoB;aACjC,CAAC,CAAA;YACF,EAAE,CAAC,CAAC,WAAW,CAAC,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;gBACpD,MAAM,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;YACpF,CAAC;YACD,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;QACtE,CAAC;QAED,MAAM,CAAC,IAAI,OAAO,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACvC,CAAC;IAED,+BAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,kBAAQ,CAAC,KAAK,CAAC;IACzC,CAAC;IAED,8BAAa,GAAb;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,kBAAQ,CAAC,IAAI,CAAC;IACvC,CAAC;IAED,+BAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,kBAAQ,CAAC,KAAK,CAAC;IACxC,CAAC;IAED,sBAAK,GAAL;QAAM,cAAc;aAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;YAAd,6BAAc;;QAChB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC9C,CAAC;IAED,qBAAI,GAAJ;QAAK,cAAc;aAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;YAAd,6BAAc;;QACf,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC7C,CAAC;IAED,sBAAK,GAAL;QAAM,cAAc;aAAd,WAAc,CAAd,sBAAc,CAAd,IAAc;YAAd,6BAAc;;QAChB,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;IAC9C,CAAC;IACL,aAAC;AAAD,CAxDA,AAwDC,IAAA;AAxDY,cAAM,SAwDlB,CAAA","file":"logger.js","sourcesContent":["\"use strict\";\n\nimport * as Winston from \"winston\";\nimport {LoggerConfig, LogLevel} from \"./config/gateway\";\nimport * as StringUtils from \"underscore.string\";\nimport * as path from \"path\";\nimport {Gateway} from \"./gateway\";\n\nlet defaults = require('defaults');\n\nexport class Logger {\n    level: LogLevel;\n    winston: Winston.LoggerInstance;\n    config: LoggerConfig;\n\n    constructor(config: LoggerConfig, gateway: Gateway) {\n        this.config = config;\n        this.winston = this.instantiateLogger(config, gateway);\n    }\n\n    private instantiateLogger(config: LoggerConfig, gateway: Gateway) {\n        this.level = (config? LogLevel[config.level] : LogLevel.info);\n        const options: Winston.LoggerOptions = {\n           level: LogLevel[this.level],\n           transports: [] \n        }\n        \n        if (config && config.console) {\n            options.transports.push(new Winston.transports.Console(config.console));\n        }\n        if (config && config.file) {\n            config.file = defaults(config.file, {\n                filename: './logs/gateway.log'\n            })\n            if (StringUtils.startsWith(config.file.filename, '.')) {\n                config.file.filename = path.join(gateway.config.rootPath, config.file.filename);                \n            }\n            options.transports.push(new Winston.transports.File(config.file));\n        }\n        \n        return new Winston.Logger(options);\n    }\n\n    isDebugEnabled (): boolean {\n        return this.level === LogLevel.debug;\n    }\n\n    isInfoEnabled (): boolean {\n        return this.level >= LogLevel.info;\n    }\n\n    isErrorEnabled (): boolean {\n        return this.level >= LogLevel.error;\n    }\n\n    debug(...args: any[]) {\n        this.winston.debug.apply(this, arguments);\n    }\n\n    info(...args: any[]) {\n        this.winston.info.apply(this, arguments);\n    }\n\n    error(...args: any[]) {\n        this.winston.error.apply(this, arguments);\n    }\n}\n"]}